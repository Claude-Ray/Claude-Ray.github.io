<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Claude&#39;s Blog</title>
  
  <subtitle>Searching</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://claude-ray.com/"/>
  <updated>2020-04-29T14:55:38.084Z</updated>
  <id>http://claude-ray.com/</id>
  
  <author>
    <name>Claude Ray</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分享一个 npm dist-tag 的冷知识</title>
    <link href="http://claude-ray.com/2020/04/29/npm-initial-publish-with-beta-tag/"/>
    <id>http://claude-ray.com/2020/04/29/npm-initial-publish-with-beta-tag/</id>
    <published>2020-04-29T13:13:15.000Z</published>
    <updated>2020-04-29T14:55:38.084Z</updated>
    
    <content type="html"><![CDATA[<p>dist-tag 是广为 npm 包开发者所熟知的属性，如果不是今天碰到一个有趣的问题，我根本没想过拉它出来玩。</p><p>为了照顾不曾了解 dist-tag 的用户，我先用一句话介绍 —— dist-tag 是 npm 版本号的命名空间，而 latest 则是默认的命名空间。想必大家不会陌生 <code>npm install &lt;name&gt;@latest</code> 这样的用法吧。</p><p>更重要的是，除非 package.json 中有所指定，所有安装默认在 latest 空间下匹配版本号。而处在 latest 空间时，也不会去名为 beta 的 dist-tag 下查找版本号。</p><p>那么问题来了！设想一个 npm 包首次发布就使用 beta 作为 dist-tag，它可以被 <code>npm install &lt;name&gt;</code> 安装吗？</p><a id="more"></a><p>答案是肯定的。</p><p>我还发布了一个空白的 npm beta 包作为验证。</p><p><img src="/image/npm-dist-tag/publish.png" alt="publish"></p><p><img src="/image/npm-dist-tag/install.png" alt="install"></p><p>明明 beta 和 latest 属于不同的命名空间，为啥这里用 latest 就把 beta 装了？</p><p>原因很简单，npm 服务端在初始化一个包时，不论发布者使用了什么 dist-tag，都会同时把它添加到 latest 上。这的确是个不成文的 feature，甚至 Verdaccio 等私服方案也按此逻辑来实现了。</p><blockquote><p>为了不污染 npm 环境（或承接相应的骂名），上面测试发布的包已经被笔者下架了 :P</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dist-tag 是广为 npm 包开发者所熟知的属性，如果不是今天碰到一个有趣的问题，我根本没想过拉它出来玩。&lt;/p&gt;
&lt;p&gt;为了照顾不曾了解 dist-tag 的用户，我先用一句话介绍 —— dist-tag 是 npm 版本号的命名空间，而 latest 则是默认的命名空间。想必大家不会陌生 &lt;code&gt;npm install &amp;lt;name&amp;gt;@latest&lt;/code&gt; 这样的用法吧。&lt;/p&gt;
&lt;p&gt;更重要的是，除非 package.json 中有所指定，所有安装默认在 latest 空间下匹配版本号。而处在 latest 空间时，也不会去名为 beta 的 dist-tag 下查找版本号。&lt;/p&gt;
&lt;p&gt;那么问题来了！设想一个 npm 包首次发布就使用 beta 作为 dist-tag，它可以被 &lt;code&gt;npm install &amp;lt;name&amp;gt;&lt;/code&gt; 安装吗？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/tags/Node-js/"/>
    
      <category term="npm" scheme="http://claude-ray.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>从 Vimium 到 qutebrowser</title>
    <link href="http://claude-ray.com/2020/01/01/from-vimium-to-qutebrowser/"/>
    <id>http://claude-ray.com/2020/01/01/from-vimium-to-qutebrowser/</id>
    <published>2020-01-01T06:21:32.000Z</published>
    <updated>2020-01-02T06:54:58.684Z</updated>
    
    <content type="html"><![CDATA[<p>过去两年，不论我安装、切换到哪家浏览器，<del>除了已逝的 Vimperator</del>，Vimium 都是第一个安装的插件。</p><p>曾经偶然听闻 qutebrowser 大名，但得知它没有让我难以割舍的 Dark Reader 插件，因此擦肩而过。</p><p>然而 Vimium 的小缺陷屡屡挑衅我的耐心，直到真正开始使用 qutebrowser，终于让我下定了迁移的决心。</p><a id="more"></a><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>Vimium 只是一个浏览器插件，Firefox 和 Chrome 均有支持，可以说在不破坏原有操作体验的同时，补充了一些键盘操作的效率提升。</p><p>可它的工作方式是页面注入式的，必须等当前页面完成初始加载后才能使用键盘操作，又有一些页面注定无法完成注入，例如浏览器自己的插件商店、配置页。</p><p>qutebrowser 则是一个 PyQt 实现的轻量 GUI 跨平台浏览器，默认基于 Chromium 内核，并专注于键盘操作。不论页面是否完成加载，都可以随时使用键盘做出强大快捷的操作。</p><p>可惜缺少插件系统，且对 inspector 的支持很差，Web 开发者们可能难以接受。</p><p>它们最大的相同点，当属两者的按键都是 Vim 风格。即使之前从未体验过的用户，看看键位图也能理解它们的差异了。</p><p><img src="/image/from-vimium-to-qutebrowser/vimium-cheatsheet.png" alt="vimium cheatsheet"></p><p><img src="/image/from-vimium-to-qutebrowser/qutebrowser-cheatsheet.png" alt="qutebrowser cheatsheet"></p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>qutebrowser 自带离线文档，<code>:help</code> 即可快捷查看，深度使用的话，自然要过上几遍。<br>接下来，我会介绍几个要点信息，帮助其他感兴趣的 Vimium 用户无痛切换到 qutebrowser。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>qutebrowser 的配置管理十分方便，支持通过修改文件自定配置。</p><p>不仅可以用 yml 文件做基础定义，还能使用 python 满足更多的定制需要。因而更推崇直接使用 config.py 做配置管理，Linux 平台在 <code>~/.config/qutebrowser/config.py</code>，Mac <code>~/.qutebrowser/config.py</code>， Windows 是 <code>%APPDATA%/qutebrowser/config/config.py</code>。</p><p>如果一开始配置文件不存在，可执行 <code>:config-write-py</code> 初始化。另有可选参数 <code>--force</code>，强制用当前配置覆写磁盘文件。</p><h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p>qutebrowser 默认搜索引擎为 duckduckgo，但可以按需增加自己的常用配置。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c.url.searchengines = &#123;</span><br><span class="line">    <span class="string">'DEFAULT'</span>: <span class="string">'https://google.com/search?q=&#123;&#125;'</span>,</span><br><span class="line">    <span class="string">'google'</span>: <span class="string">'https://google.com/search?q=&#123;&#125;'</span>,</span><br><span class="line">    <span class="string">'duckduckgo'</span>: <span class="string">'https://duckduckgo.com/?q=&#123;&#125;'</span>,</span><br><span class="line">    <span class="string">'github'</span>: <span class="string">'https://github.com/search?q=&#123;&#125;'</span>,</span><br><span class="line">    <span class="string">'npm'</span>: <span class="string">'https://npmjs.com/search?q=&#123;&#125;'</span>,</span><br><span class="line">    <span class="string">'baidu'</span>: <span class="string">'https://baidu.com/s?wd=&#123;&#125;'</span>,</span><br><span class="line">    <span class="string">'mijisou'</span>: <span class="string">'https://mijisou.com/search?q=&#123;&#125;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="键位迁移"><a href="#键位迁移" class="headerlink" title="键位迁移"></a>键位迁移</h2><p>作为 Vimium 老用户，我保留了之前的使用习惯，修改如下键位，并参考 <a href="https://github.com/amosbird/serverconfig" target="_blank" rel="noopener">Amos Bird</a> 的配置，增加了在模式转换时自动切换中文输入法状态。这里使用的是 fcitx-remote，在 Mac 下，可以借助 <a href="https://github.com/xcodebuild/fcitx-remote-for-osx" target="_blank" rel="noopener">fcitx-remote-for-osx</a> 实现同样的效果。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bindings for normal mode</span></span><br><span class="line">config.bind(<span class="string">'x'</span>, <span class="string">'tab-close'</span>)</span><br><span class="line">config.bind(<span class="string">'X'</span>, <span class="string">'undo'</span>)</span><br><span class="line">config.bind(<span class="string">'J'</span>, <span class="string">'tab-prev'</span>)</span><br><span class="line">config.bind(<span class="string">'K'</span>, <span class="string">'tab-next'</span>)</span><br><span class="line">config.bind(<span class="string">'d'</span>, <span class="string">'scroll-page 0 0.5'</span>)</span><br><span class="line">config.bind(<span class="string">'u'</span>, <span class="string">'scroll-page 0 -0.5'</span>)</span><br><span class="line">config.bind(<span class="string">'j'</span>, <span class="string">'scroll-page 0 0.1'</span>)</span><br><span class="line">config.bind(<span class="string">'k'</span>, <span class="string">'scroll-page 0 -0.1'</span>)</span><br><span class="line">config.bind(<span class="string">'i'</span>, <span class="string">'enter-mode insert ;; spawn fcitx-remote -t'</span>)</span><br><span class="line">config.bind(<span class="string">'gi'</span>, <span class="string">'hint inputs --first ;; spawn fcitx-remote -t'</span>)</span><br><span class="line">config.bind(<span class="string">'p'</span>, <span class="string">'open -- &#123;clipboard&#125;'</span>)</span><br><span class="line">config.bind(<span class="string">'P'</span>, <span class="string">'open -t -- &#123;clipboard&#125;'</span>)</span><br><span class="line">config.unbind(<span class="string">'gl'</span>)</span><br><span class="line">config.unbind(<span class="string">'gr'</span>)</span><br><span class="line">config.bind(<span class="string">'gj'</span>, <span class="string">'tab-move -'</span>)</span><br><span class="line">config.bind(<span class="string">'gk'</span>, <span class="string">'tab-move +'</span>)</span><br><span class="line">config.bind(<span class="string">'&lt;Escape&gt;'</span>, c.bindings.default[<span class="string">'normal'</span>][<span class="string">'&lt;Escape&gt;'</span>] + <span class="string">' ;; fake-key &lt;Escape&gt; ;; clear-messages ;; jseval --quiet document.getSelection().empty()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bindings for insert mode</span></span><br><span class="line">config.bind(<span class="string">'&lt;Ctrl-a&gt;'</span>, <span class="string">'fake-key &lt;Home&gt;'</span>, mode=<span class="string">'insert'</span>)</span><br><span class="line">config.bind(<span class="string">'&lt;Ctrl-e&gt;'</span>, <span class="string">'fake-key &lt;End&gt;'</span>, mode=<span class="string">'insert'</span>)</span><br><span class="line">config.bind(<span class="string">'&lt;Ctrl-d&gt;'</span>, <span class="string">'fake-key &lt;Delete&gt;'</span>, mode=<span class="string">'insert'</span>)</span><br><span class="line">config.bind(<span class="string">'&lt;Ctrl-h&gt;'</span>, <span class="string">'fake-key &lt;Backspace&gt;'</span>, mode=<span class="string">'insert'</span>)</span><br><span class="line">config.bind(<span class="string">'&lt;Ctrl-k&gt;'</span>, <span class="string">'fake-key &lt;Ctrl-Shift-Right&gt; ;; fake-key &lt;Backspace&gt;'</span>, mode=<span class="string">'insert'</span>)</span><br><span class="line">config.bind(<span class="string">'&lt;Ctrl-f&gt;'</span>, <span class="string">'fake-key &lt;Right&gt;'</span>, mode=<span class="string">'insert'</span>)</span><br><span class="line">config.bind(<span class="string">'&lt;Ctrl-b&gt;'</span>, <span class="string">'fake-key &lt;Left&gt;'</span>, mode=<span class="string">'insert'</span>)</span><br><span class="line">config.bind(<span class="string">'&lt;Ctrl-n&gt;'</span>, <span class="string">'fake-key &lt;Down&gt;'</span>, mode=<span class="string">'insert'</span>)</span><br><span class="line">config.bind(<span class="string">'&lt;Ctrl-p&gt;'</span>, <span class="string">'fake-key &lt;Up&gt;'</span>, mode=<span class="string">'insert'</span>)</span><br><span class="line">config.bind(<span class="string">'&lt;Escape&gt;'</span>, <span class="string">'spawn fcitx-remote -t ;; leave-mode ;; fake-key &lt;Escape&gt;'</span>, mode=<span class="string">'insert'</span>)</span><br></pre></td></tr></table></figure><h2 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h2><p>通过 <code>c.content.proxy</code>，可以轻松配置自己的代理，支持 http 和 socks 协议。</p><p>为了简化配置过程，我使用了 <code>Privoxy</code> 做了 http PAC 代理，可以参考我在 Mac 平台的 <a href="https://github.com/Claude-Ray/dotfiles/blob/master/macos/privoxy.sh" target="_blank" rel="noopener">Shell 脚本</a>。</p><h2 id="窗口最大化"><a href="#窗口最大化" class="headerlink" title="窗口最大化"></a>窗口最大化</h2><p>绝大部分时间，我的浏览器是处于窗口最大化的。当然不是 Mac 原生的全屏，私以为那种另开一个桌面的全屏模式体验太差，不仅窗口切换动画时间长，也无法与别的任务窗口叠加，总有需要抄点东西的时候。</p><p>在 Mac 上，qutebrowser 的 title bar 实在是又丑又大，可以通过 <code>c.window.hide_decoration = True</code> 来关闭它。但至今还存在的一个问题是关闭 title bar 之后，无法再调整窗口大小。</p><p>即使在更改设置之前 qutebrowser 窗口处于最大化状态，hide_decoration 只能起到隐藏 title bar 的效果，体现到界面上就是残缺的一条空白。身为强迫症简直不能忍！</p><p>一番琢磨，终于找到了临时的解决办法：</p><ol><li>先把 hide_decoration 关掉，在浏览器上快捷执行 <code>:set window.hide_decoration false</code></li><li>再将浏览器全屏，对应指令 <code>:fullscreen</code></li><li>执行 <code>:set window.hide_decoration true</code></li><li>按 <code>Ctrl+Up</code> 或用手势操作进入 Mission Control 界面，将最大化的 qutebrowser 从新桌面中拖拽到原来的桌面</li><li>这时 qutebrowser 进入短暂的“无响应”阶段，用鼠标点击或滚动一下窗口的任意地方即可重新激活</li></ol><p>这样就获得了无边框最大化的 qutebrowser。经过检验，重启 qutebrowser，甚至重启系统之后均能保持窗口最大化。</p><p>我还加了 title bar 的热键简化操作（下面 Meta 实为 Command/Super）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c.window.hide_decoration = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">config.bind(<span class="string">'&lt;Meta-Ctrl-f&gt;'</span>, <span class="string">'config-cycle window.hide_decoration false true'</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过一个多星期的使用，qutebrowser 流畅的操作体验令我开怀不矣，现在彻底将它作为主力浏览器。</p><p>另一方面，它支持 insert 模式的按键定制，可以让我们在其他系统环境下，像 Mac 一样在浏览器中使用 Emacs-like 键位做行内编辑！</p><p>假如你之前从未使用过 Vim-like 的浏览器插件，可以先把 Vimium 装起来。即使键位需要一点时间适应，可它胜在有着极大的包容性——不存在模式切换，没有按键冲突，也就不用担心它会降低你既有的操作效率。</p><p>最后，我的配置都在自己的 <a href="https://github.com/Claude-Ray/dotfiles" target="_blank" rel="noopener">dotfiles</a> 仓库，希望对你有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过去两年，不论我安装、切换到哪家浏览器，&lt;del&gt;除了已逝的 Vimperator&lt;/del&gt;，Vimium 都是第一个安装的插件。&lt;/p&gt;
&lt;p&gt;曾经偶然听闻 qutebrowser 大名，但得知它没有让我难以割舍的 Dark Reader 插件，因此擦肩而过。&lt;/p&gt;
&lt;p&gt;然而 Vimium 的小缺陷屡屡挑衅我的耐心，直到真正开始使用 qutebrowser，终于让我下定了迁移的决心。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Essay" scheme="http://claude-ray.com/categories/Essay/"/>
    
    
      <category term="Vim" scheme="http://claude-ray.com/tags/Vim/"/>
    
      <category term="Browser" scheme="http://claude-ray.com/tags/Browser/"/>
    
      <category term="Equipment" scheme="http://claude-ray.com/tags/Equipment/"/>
    
  </entry>
  
  <entry>
    <title>Verdaccio 性能优化：单机 Cluster</title>
    <link href="http://claude-ray.com/2019/12/31/optimize-verdaccio-cluster/"/>
    <id>http://claude-ray.com/2019/12/31/optimize-verdaccio-cluster/</id>
    <published>2019-12-31T11:46:30.000Z</published>
    <updated>2020-02-14T01:18:29.738Z</updated>
    
    <content type="html"><![CDATA[<p>本篇将讨论如何解决 <a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener">Verdaccio</a> 官方本地存储方案不支持 Cluster 的问题。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>标题为什么叫单机 Cluster 呢？</p><p>因为多机 Cluster 已经无法使用默认的本地存储，必须配合一套新的存储方案，而官方只提供了 AWS 和 Google Cloud 的支持。这在国内已经是一道门槛，因此大概率是要用上其他云存储服务的，这意味着必须做一个 Verdaccio 插件实现必备的 add、search、remove、get 功能。</p><p>糟糕的是，倘若自己的云存储不支持查询功能，还得基于数据库再造一套轮子，甚至再加一套解决读写冲突的轮子。</p><p>一句话来说，Verdaccio 是轻量级好手，不适合也不必要承载太重的装备。重度使用的场景下，与其从头定制的存储体系，不如直接上 cnpm、Nexus 等体积更大、相对成熟的系统。</p><p>话说回来，作为尝试，我还是基于 Redis 实现了它的单机 Cluster。虽然修改的 Verdaccio 版本较旧，但其新版 V4 的架构并没有太大变化，思路还是一致的。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>Verdaccio 默认无法使用 PM2 Cluster 启动，有两大阻碍。</p><p>其一，缓存同步。它使用进程级别的内存缓存，没有实现进程间通讯，多进程之间缓存信息不能同步。</p><p>其二，写锁。本地存储将内容持久化到本机磁盘，只有进程级别的“锁”，多进程容易出现写文件冲突。</p><p>这两个问题处理起来其实非常简单，特别是引入 Redis 之后。</p><p>针对第一点，内存缓存可以迁移到 Redis，但是其中有大体积的 JSON 信息，不适合存在 Redis，可以用 Redis 做消息中心，管理各进程的缓存状态。</p><p>针对第二点，私服本身属于简单的业务场景，Redis 锁完全可以胜任。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>本应该是 Show Code 环节，可念在笔者改的版本不存在普适性，索性改成修改要点的简单罗列吧。</p><ul><li><p>重写 local storage，本地存储依赖一个叫 <code>.sinopia-db.json</code> 或 <code>.verdaccio-db.json</code> 的文件，其中保存所有私服的包。这个文件的内容适合使用 Redis 的 set 结构进行替换。</p></li><li><p>查找并替换所有 <code>fs.writeFile</code>，加锁处理。在锁的实现上，新手需要多看官方文档，大部分博客的实现都是错误的，比如忽略了解锁步骤的原子化操作。</p></li><li><p>向上回溯修改的链路。</p></li></ul><h2 id="额外的补充"><a href="#额外的补充" class="headerlink" title="额外的补充"></a>额外的补充</h2><p>想来这可能是专题的最后一期，于是把不太相关的几个小问题也堆到下面吧。</p><p>只关心 Cluster 改造的看官可跳过此节，直接看末尾总结。</p><h3 id="异步风格"><a href="#异步风格" class="headerlink" title="异步风格"></a>异步风格</h3><p>由于手上的 Verdaccio 版本较老，整体还是 callback 风格，让改造多了一点工作量。我使用的 Redis 客户端为 ioredis，注意把涉及到的调用链路都改造为 async/await。</p><h3 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h3><p>另一个坑点是我拿到的 Redis 其实是 Codis 集群，这套方案的一个缺点是无法使用 Redis 弱弱的发布订阅功能，也就不能直接拿来订阅更新内存缓存的消息。只好另辟蹊径，将 Redis 作为“缓存中心”，进程取缓存前先查询标志位，如果标志位存在，代表内存缓存需要更新。以进程号等信息做 key 前缀表示区分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheCenter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(prefixKey = 'updated') &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="comment">// 利用 redis 缓存标志位，为空时表示缓存需要更新</span></span><br><span class="line">    <span class="keyword">this</span>.prefix = prefixKey;</span><br><span class="line">    <span class="comment">// 用 pm2 进程号区分缓存状态</span></span><br><span class="line">    <span class="keyword">this</span>.ip = getIPAddress();</span><br><span class="line">    <span class="keyword">this</span>.id = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.ip&#125;</span>:<span class="subst">$&#123;process.env.NODE_APP_INSTANCE || <span class="number">0</span>&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">get</span>(key) &#123;</span><br><span class="line">    <span class="keyword">const</span> isCached = <span class="keyword">this</span>.data.has(key);</span><br><span class="line">    <span class="keyword">if</span> (isCached) &#123;</span><br><span class="line">      <span class="keyword">const</span> isCacheLatest = <span class="keyword">await</span> redis.hget(<span class="keyword">this</span>._key(key), <span class="keyword">this</span>.id);</span><br><span class="line">      <span class="keyword">if</span> (isCacheLatest) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data.get(key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">set</span>(key, value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.set(key, value);</span><br><span class="line">    <span class="keyword">await</span> redis.hset(<span class="keyword">this</span>._key(key), <span class="keyword">this</span>.id, <span class="built_in">Date</span>.now());</span><br><span class="line">    redis.expire(<span class="keyword">this</span>._key(key), <span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> del(key) &#123;</span><br><span class="line">    redis.del(<span class="keyword">this</span>._key(key));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  has(key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.has(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _key(key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.prefix&#125;</span>:<span class="subst">$&#123;key&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIPAddress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> interfaces = os.networkInterfaces();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> iface <span class="keyword">of</span> <span class="built_in">Object</span>.values(interfaces)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> alias <span class="keyword">of</span> iface) &#123;</span><br><span class="line">      <span class="keyword">if</span> (alias.family === <span class="string">'IPv4'</span> &amp;&amp; alias.address !== <span class="string">'127.0.0.1'</span> &amp;&amp; !alias.internal) &#123;</span><br><span class="line">        <span class="keyword">return</span> alias.address;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'127.0.0.1'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> CacheCenter();</span><br></pre></td></tr></table></figure><h3 id="页面搜索优化"><a href="#页面搜索优化" class="headerlink" title="页面搜索优化"></a>页面搜索优化</h3><p>顺便一提，Verdaccio web 页面的 /search 接口性能极差，实现也存在诸多问题。此处值得加一层内存缓存，等到新包发布时刷新。</p><p>早期 Verdaccio 不支持使用 name 搜索名为 @scope/name 的包，可增加一条 name 专用的索引字段促成改进。根源是依赖的 lunr 引擎版本过低（0.7.0），但最新 lunr 的表现依然不太理想。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Search</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.index = lunr(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.field(<span class="string">'name'</span>, &#123;<span class="attr">boost</span>: <span class="number">10</span>&#125;);</span><br><span class="line">      <span class="keyword">this</span>.field(<span class="string">'unscoped'</span>, &#123;<span class="attr">boost</span>: <span class="number">8</span>&#125;);</span><br><span class="line">      <span class="keyword">this</span>.field(<span class="string">'description'</span>, &#123;<span class="attr">boost</span>: <span class="number">4</span>&#125;);</span><br><span class="line">      <span class="keyword">this</span>.field(<span class="string">'author'</span>, &#123;<span class="attr">boost</span>: <span class="number">6</span>&#125;);</span><br><span class="line">      <span class="keyword">this</span>.field(<span class="string">'readme'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Add a new element to index</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>pkg the package</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  add(pkg) &#123;</span><br><span class="line">    <span class="keyword">this</span>.index.add(&#123;</span><br><span class="line">      id: pkg.name,</span><br><span class="line">      name: pkg.name,</span><br><span class="line">      unscoped: getUnscopedName(pkg.name),</span><br><span class="line">      description: pkg.description,</span><br><span class="line">      author: pkg._npmUser ? pkg._npmUser.name : <span class="string">'???'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 截取包名中不带 scope 的部分</span></span><br><span class="line"><span class="comment"> * 参照命名规范 <span class="doctag">@scope</span>/name，直接截取/后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUnscopedName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name.split(<span class="string">'/'</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为 Verdaccio 开启 Cluster 能力并不是一个轻松的做法，但经过这个系列解读，却可以轻松地作出选择。</p><p>如果只是想一定程度上提高处理高并发的性能，可以采取上一篇<a href="http://claude-ray.com/2019/10/22/optimize-verdaccio-proxy/">代理分流</a>的做法，代理可以帮你分担 99% 以上的压力。</p><p>如果想进一步提升性能，实现应用的平滑重启，本文单机 Cluster 并配合 pm2 reload 的做法不妨一试。</p><p>而一但想开启多节点集群的能力，几乎超出了轻量级私服的理念，试着迁移到 cnpm、Nexus 吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇将讨论如何解决 &lt;a href=&quot;https://github.com/verdaccio/verdaccio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Verdaccio&lt;/a&gt; 官方本地存储方案不支持 Cluster 的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/tags/Node-js/"/>
    
      <category term="npm" scheme="http://claude-ray.com/tags/npm/"/>
    
      <category term="Verdaccio" scheme="http://claude-ray.com/tags/Verdaccio/"/>
    
      <category term="private npm registry" scheme="http://claude-ray.com/tags/private-npm-registry/"/>
    
  </entry>
  
  <entry>
    <title>让 npm install 不使用缓存的方法</title>
    <link href="http://claude-ray.com/2019/12/06/npm-install-without-cache/"/>
    <id>http://claude-ray.com/2019/12/06/npm-install-without-cache/</id>
    <published>2019-12-06T04:04:56.000Z</published>
    <updated>2019-12-06T07:22:14.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>npm 的安装出错是屡见不鲜，往往是因为安装的环境不够 “clean”。</p><p>通常情况下，只要删除项目目录的 node_modules 和 package-lock.json，重新执行 install 就能解决。</p><p>偶尔也会出现上述操作解决不了的问题，譬如 npm 的缓存文件异常，就需要在安装前执行 <code>npm cache clean --force</code> 清空缓存目录。</p><p>但 npm cache clean 也存在两个未处理的缺陷，使它既不完全可靠又具备风险。</p><a id="more"></a><ol><li><p>部分依赖会和 npm 共用缓存目录（终端下通过 <code>npm config get cache</code> 命令查看，默认 <code>~/.npm</code>），用来存放自己的临时文件。</p><p> 而 npm@5 之后，cache clean 只会清除该缓存目录下的 <code>_cacahce</code> 子目录，而忽视不在该子目录的缓存。</p><p> 例如 @sentry/cli 将缓存放在了和 _cacache 同级的 <a href="https://github.com/getsentry/sentry-cli/blob/1.49.0/scripts/install.js#L78" target="_blank" rel="noopener">sentry-cli</a> 目录，clean cache 不会清除此处缓存。</p><blockquote><p>此例有网友专门记录了<a href="https://github.com/sliwey/blog/issues/1" target="_blank" rel="noopener">排错经过</a></p></blockquote></li><li><p>突然执行 cache clean，将导致正在使用 npm install 的项目丢失部分依赖。</p><p> 如果有多个项目在同一环境执行 npm install，此问题的影响会进一步扩大，npm 将抛出各种文件操作错误。</p></li></ol><p>鉴于缓存出错是极小概率事件，若能使用温和的安装方式避开缓存文件，无疑是更好的选择。</p><p>可是，npm install 利用缓存的行为是默认且强制的，目前官方还没有提供形如 –no-cache 的选项来做一次忽略缓存的干净安装。</p><blockquote><p>npm-cache 机制详见<a href="https://docs.npmjs.com/cli/cache.html" target="_blank" rel="noopener">官网文档</a></p></blockquote><h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>尽管 npm cli 还没支持，但这个需求我们自己实现起来却十分简单。</p><p>既然 cache 目录是通过 npm config get cache 获取的，也就支持相应的 set 方式。为每个待安装项目重新配置 cache 目录，等于变相地清除了 npm 之前所有的缓存。</p><p>当然，直接 npm config set cache 会让 npm 全局生效，为了单独设置缓存目录，在项目内添加 .npmrc 文件，并加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cache&#x3D;.npm</span><br></pre></td></tr></table></figure><p>可观察到缓存路径的变更生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm config get cache</span><br><span class="line">/Users/claude/.npm</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ~/node-project &amp;&amp; <span class="built_in">echo</span> cache=.npm &gt;&gt; .npmrc</span><br><span class="line"></span><br><span class="line">$ npm config get cache</span><br><span class="line">/Users/claude/node-project/.npm</span><br></pre></td></tr></table></figure><p>再安装就会重新下载依赖啦，还起到了环境隔离的作用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h1&gt;&lt;p&gt;npm 的安装出错是屡见不鲜，往往是因为安装的环境不够 “clean”。&lt;/p&gt;
&lt;p&gt;通常情况下，只要删除项目目录的 node_modules 和 package-lock.json，重新执行 install 就能解决。&lt;/p&gt;
&lt;p&gt;偶尔也会出现上述操作解决不了的问题，譬如 npm 的缓存文件异常，就需要在安装前执行 &lt;code&gt;npm cache clean --force&lt;/code&gt; 清空缓存目录。&lt;/p&gt;
&lt;p&gt;但 npm cache clean 也存在两个未处理的缺陷，使它既不完全可靠又具备风险。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/tags/Node-js/"/>
    
      <category term="npm" scheme="http://claude-ray.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Verdaccio 性能优化：代理分流</title>
    <link href="http://claude-ray.com/2019/11/30/optimize-verdaccio-proxy/"/>
    <id>http://claude-ray.com/2019/11/30/optimize-verdaccio-proxy/</id>
    <published>2019-11-30T11:08:03.000Z</published>
    <updated>2020-02-14T01:18:29.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里的 <a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener">Verdaccio</a> 是指用于搭建轻量级 npm 私有仓库的开源解决方案，以下简称 npm 私服。</p><p>前段时间写了一点分流相关的<a href="http://claude-ray.com/2019/10/22/optimize-verdaccio-package-route/">优化思路</a>，但那是以节省资源开销为主、不冲破原有结构的微调，从结果上看，甚至不是合格的优化。</p><p>随着用户（请求）数量的上升，服务响应速度和效率其实才是最要紧的问题，节省资源终究不能改善这一点。因此我决定实施上次浮现在脑中的想法，将内外网的 npm 包流量彻底分流。</p><a id="more"></a><h3 id="关于-Cluster-模式的说明"><a href="#关于-Cluster-模式的说明" class="headerlink" title="关于 Cluster 模式的说明"></a>关于 Cluster 模式的说明</h3><p>再次解释，Verdaccio 官方文档明确表示不能支持（PM2）Cluster 模式。另外，其云存储方案是可以支持多进程多节点部署的，但只提供了 google cloud、aws s3 storage 的插件。</p><p>不过在此基础上，只要拥有自己的云存储服务，就能使用或设计一套新的存储插件，进而支持多进程架构。此方案一定可行，只是相比本篇的做法，需要的成本更高一些。</p><p>俗话说得好，没有一个中间层解决不了的问题，而在 Verdaccio 的场景下，这种做法又是相当地迅速和高效。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="npm-安装机制"><a href="#npm-安装机制" class="headerlink" title="npm 安装机制"></a>npm 安装机制</h3><p>如果不了解 npm 官方客户端的安装机制，稍后可以阅读阮一峰的博客[[<a href="http://www.ruanyifeng.com/blog/2016/01/npm-install.html][《npm" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/01/npm-install.html][《npm</a> 模块安装机制简介》]]，少部分知识已经不适用于当前版本了，不过最重要的是能理解 npm 下载流程。</p><p>其中我们需要知道，npm 包下载前，客户端会向上游服务器查询包信息，以及获取压缩包的下载地址 url，并将此 url 存放在 package-lock.json 文件中。以后每次执行下载，都会优先使用 package-lock.json 中的地址。</p><h3 id="npm-下载最长请求路径"><a href="#npm-下载最长请求路径" class="headerlink" title="npm 下载最长请求路径"></a>npm 下载最长请求路径</h3><p>为了方便理解 Verdaccio 所处的位置，我来绘制一下 npm 包下载时从客户端到 Verdaccio 再到上游的最长请求路径简图，并忽略中间的安全验证环节，如下所示。</p><p><img src="/image/optimize-verdaccio-proxy/verdaccio-fetch-path.png" alt="npm 请求路径"></p><h3 id="接口转发"><a href="#接口转发" class="headerlink" title="接口转发"></a>接口转发</h3><p>有了代理层，就可以忽略 Verdaccio 内部的各种逻辑，不受技术栈的约束，编写少量的代码，便能完成主要接口的分流。</p><p>首要的接口是 <code>/:package/:version?</code> ，释放私服最大的查询压力，原因可以看<a href="http://claude-ray.com/2019/10/22/optimize-verdaccio-package-route">这里的解释</a>。</p><p>次要的接口是 <code>/:package/-/:filename</code> ，也就是实际的下载接口。并且其中还涉及另一个极为有利的优化。</p><p>尽管 Verdaccio 是转发上游的资源，它也会将下载 url 变更为自己的服务域名。因此不论依赖是否私有，记录到 package-lock.json 中的地址都是 Verdaccio 的地址。</p><p>但经过代理层的分流，此后经过更新的 package-lock.json 将保留原汁原味的下载地址，此后下载压缩包的请求再也不会发到私服。</p><p>综上所述，我们可以将私服超过 99.99% 的流量转移到代理或上游服务。</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>接下来，我们来确定分流口径，自然是判断一个 package 是否是私服私有，因此需要 Verdaccio 提供接口，获取私有包的列表。</p><p>Verdaccio 有一个 <code>/-/verdaccio/packages</code> 接口用来获取所有私有包的信息，但这个包主要用于 Web 页面，包含大量我们不需要的信息，甚至简单一点，只要提供私有 npm 包的包名就能满足筛选条件。</p><p>因此，可以改良 <code>/-/verdaccio/packages</code>，例如新增一个专门获取包名列表的接口，并增加内存缓存。</p><p>Verdaccio 版本不同时，做法也有很大差异，相信这里的处理不是问题，只要认真阅读上述接口就能获取思路了。</p><p>PS：还是补充一点代码吧，早期版本 Verdaccio 只需要这样改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get name list of all visible package</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@route </span>/-/verdaccio/names</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">route.get(<span class="string">'/names'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 此处 cache 作为缓存，在有新的私有 npm 包发布时刷新即可</span></span><br><span class="line">  <span class="keyword">let</span> names = cache.get(<span class="string">'packageNames'</span>);</span><br><span class="line">  <span class="keyword">if</span> (!names) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      names = <span class="keyword">await</span> storage.localStorage.localList.get();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    cache.set(<span class="string">'packageNames'</span>, names);</span><br><span class="line">  &#125;</span><br><span class="line">  next(names);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最新的 names 要使用回调的方式取值，伪代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span></span><br><span class="line">  storage.localStorage.storagePlugin.get(<span class="function">(<span class="params">err, list</span>) =&gt;</span></span><br><span class="line">    err ? reject(err): resolve(list)))</span><br></pre></td></tr></table></figure><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端也能承担分流的任务，即像 cnpm 一样包装一层自己的 npm cli 工具，但分流的逻辑要简单许多，只需检查要安装的包是否属于私有，然后分为两批安装。</p><p>缺陷是推行难度和速度都不理想，于是这里只是顺便提一下。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>到这一步，技术选型已经无所谓了，自然可以 nginx + lua，简单一点就继续使用 Node.js 实现。</p><p>由于其他原因，我用 express 做了实现，贴一点转发逻辑，大家就自由发挥吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> rp = <span class="built_in">require</span>(<span class="string">'request-promise-native'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publicRegistry = <span class="string">'http://registry.npm.taobao.org'</span>;</span><br><span class="line"><span class="keyword">const</span> privateRegistry = <span class="string">'http://npm.private.com'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sec = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> min = <span class="number">60</span> * sec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> privateListCache = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查并更新私服包名列表的缓存</span></span><br><span class="line"><span class="comment"> * 缓存可以基于 redis 或内存，注意控制好更新节奏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPrivateCache</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * npm package 请求分流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@route </span>/:packages/:version?   版本检查</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@route </span>/:packages/-/:filename 下载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">packages</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.url)</span><br><span class="line">  <span class="keyword">await</span> checkPrivateCache();</span><br><span class="line">  <span class="comment">// 请求默认转发至 taobao</span></span><br><span class="line">  <span class="keyword">let</span> baseUrl = publicRegistry;</span><br><span class="line">  <span class="keyword">if</span> (privateListCache.length &amp;&amp; privateListCache.includes(req.params.package)) &#123;</span><br><span class="line">    <span class="comment">// 转发私服的请求</span></span><br><span class="line">    baseUrl = privateRegistry;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    uri: baseUrl + req.url,</span><br><span class="line">    timeout: <span class="number">2</span> * min</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    request(options).on(<span class="string">'error'</span>, next).pipe(res)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    next(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 其他请求原样转发私服</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@route </span>/*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">all</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 清除 headers 的 host</span></span><br><span class="line">  <span class="keyword">const</span> headers = <span class="built_in">Object</span>.assign(&#123;&#125;, req.headers, &#123; <span class="attr">host</span>: <span class="literal">undefined</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    uri: privateRegistry + req.url,</span><br><span class="line">    method: req.method,</span><br><span class="line">    timeout: <span class="number">2</span> * min,</span><br><span class="line">    headers</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    req.pipe(request(options).on(<span class="string">'error'</span>, next)).pipe(res);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    next(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>在同样的测试条件下，私服的 /:package/:version? 接口平均响应耗时从 4s 降至 400 ms，可以明显感觉到速度的提升，并且可以通过不断扩展代理层优化处理效率。作为轻量级的私服解决方案，已经可以续命很久了。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>这个系列就此结束了吗？<del>当然没有，cluster 的坑还没填呢！</del>也确实可能会鸽掉…</p><p>因为支持 cluster 需要较深入的二次开发，也有新的中间件引入，相比目前的成本要高出不少。并且 Verdaccio 新旧版本的逻辑存在一定差异，我在老版本中已经解决了此问题，但新版可能又要另一套实现。</p><p>所以，等我读完 Verdaccio 最新的代码再说吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这里的 &lt;a href=&quot;https://github.com/verdaccio/verdaccio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Verdaccio&lt;/a&gt; 是指用于搭建轻量级 npm 私有仓库的开源解决方案，以下简称 npm 私服。&lt;/p&gt;
&lt;p&gt;前段时间写了一点分流相关的&lt;a href=&quot;http://claude-ray.com/2019/10/22/optimize-verdaccio-package-route/&quot;&gt;优化思路&lt;/a&gt;，但那是以节省资源开销为主、不冲破原有结构的微调，从结果上看，甚至不是合格的优化。&lt;/p&gt;
&lt;p&gt;随着用户（请求）数量的上升，服务响应速度和效率其实才是最要紧的问题，节省资源终究不能改善这一点。因此我决定实施上次浮现在脑中的想法，将内外网的 npm 包流量彻底分流。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/tags/Node-js/"/>
    
      <category term="npm" scheme="http://claude-ray.com/tags/npm/"/>
    
      <category term="Verdaccio" scheme="http://claude-ray.com/tags/Verdaccio/"/>
    
      <category term="private npm registry" scheme="http://claude-ray.com/tags/private-npm-registry/"/>
    
  </entry>
  
  <entry>
    <title>Verdaccio 性能优化：上游路径转发</title>
    <link href="http://claude-ray.com/2019/10/22/optimize-verdaccio-package-route/"/>
    <id>http://claude-ray.com/2019/10/22/optimize-verdaccio-package-route/</id>
    <published>2019-10-22T11:32:39.000Z</published>
    <updated>2020-01-02T08:41:16.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这里的 <a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener">Verdaccio</a> 是指用于搭建轻量级 npm 私有仓库的开源解决方案，以下简称 npm 私服。</p><p>近期观察发现，有些项目依赖了名为 <code>npm</code> 的 npm 包，每次项目部署时都会向私服 <code>/npm</code> 发起请求记录，并在监控曲线上呈明显的高耗时，这引起了我们的关注。</p><p>有些项目依赖了 npm 自身的包，每次项目部署时都会产生对私服 <code>/npm</code> 路由的请求记录，并在监控曲线上呈明显的高耗时，这引起了我们的关注。</p><a id="more"></a><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Verdaccio 对公共（外网）npm 包的中转存在不小的性能损耗。</p><p>其中一个问题，通过私服下载未经缓存的公共 npm 包，Verdaccio 都要等上游镜像的响应完整结束之后，才开始响应私服用户的请求。这导致 Verdaccio 的整体速度比直接用上游慢了一截。</p><p>至于会慢多少呢，要提到另一个 npm 机制：一个依赖 package 下载之前，要先到镜像地址的 =/:package/:version?= 接口获取完整的包信息，之后才会下载所需的版本。而一个模块历史发布过的版本越多，信息量越大。尤其是 npm 自身这个包，访问一下 <a href="http://registry.npmjs.org/npm" target="_blank" rel="noopener">http://registry.npmjs.org/npm</a> 便知。</p><p>Verdaccio 慢就慢在获取包信息这一步，它必须等待上游接口响应完成，才能做相关 JSON 解析和逻辑处理。因此不仅仅是慢的问题了，还有内存和 CPU 的大量消耗。</p><p>然而这一步对于 Verdaccio 又很重要，因为它的对于此接口的缓存策略基于文件，只有拿到完整的 JSON 返回值才能将其记录到文件中。只是默认仅 2 分钟的缓存时间，让这一步操作的性价比打了折扣。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>从上面看，私服接口性能优化空间还很大，哪怕只是将几个体积较大的“罪魁祸首” npm 包单独优化，也能缓解私服的压力。</p><p>首先想到的是让 Verdaccio 不必等待上游全部返回就开始响应私服用户。其次是现有的缓存机制对部分低频率高开销的 package 请求形同虚设，小机器又经不起缓存扩充的资源消耗，网络带宽倒是相对不缺，降低计算成本、纯网络代理转发是一个可行的方向。</p><p>Verdaccio 会对下载的 npm 包信息做解析和记录，但其实我们并不关心那些只属于上游的包，只希望它能承担好转发工作，甚至所有公共依赖都不经过私服处理。</p><p>退一步讲，就是要弱化在私服中对这些公共依赖的处理，减少解析过程 —— 用 stream 或 buffer 完成请求转发。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>遗憾的是 Verdaccio 自身的接口难以复用，只好直接在其基础上增加路由(中间件)。简单粗暴，对项目的熵值影响不大。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">const</span> createError = <span class="built_in">require</span>(<span class="string">'http-errors'</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> URL = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Middleware = <span class="built_in">require</span>(<span class="string">'../../web/middleware'</span>);</span><br><span class="line"><span class="keyword">const</span> Utils = <span class="built_in">require</span>(<span class="string">'../../../lib/utils'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">route, auth, storage, config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> can = Middleware.allow(auth);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 优化特定依赖的获取，以 `npm` 举例</span></span><br><span class="line">  route.get(<span class="string">'/npm'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 拼接镜像地址</span></span><br><span class="line">    <span class="keyword">const</span> upLinkUrl = _.get(config, <span class="string">'uplinks.npmjs.url'</span>, <span class="string">'https://registry.npm.taobao.org'</span>);</span><br><span class="line">    <span class="keyword">const</span> packageUrl = URL.resolve(upLinkUrl, req.originalUrl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用 Verdaccio 定义的 res.report_error 来采集错误</span></span><br><span class="line">    <span class="keyword">const</span> npmRes = request(packageUrl)</span><br><span class="line">      .on(<span class="string">'error'</span>, res.report_error);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接将上游结果转发，快速响应请求</span></span><br><span class="line">    req.pipe(npmRes).pipe(res);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  route.get(<span class="string">'/:package/:version?'</span>, can(<span class="string">'access'</span>), <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面是 stream 方式的修改，也可以把路由改写为中间件。stream 转发减轻了服务的内存压力（节省上百 MB 的临时缓冲），并减少这部分接口 50% 以上的 TTFB 响应时间，不过总体响应时间却因为 stream 有所延长。</p><p>降低机器负载的目标达成了，但压力测试证明这会大大拖慢进程的处理效率，在并发较低的情况下才能采用。</p><p>作为尝试，目前这个 patch 只用在了特定依赖。Verdaccio 可优化的方向很多，单进程可提升空间有限的情况，该把重心放在横向扩展上了。</p><h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2><p>转发所有上游 npm 包的念想还未落地，虽然做起来应该很简单，但需要继续摸索 Verdaccio 结构，才好给出更合适的修改方案。</p><p>现在能给出的最简单做法就是适当调高 Verdaccio 默认 2 分钟的缓存 TTL。提升最大的做法是扩展 Verdaccio 尚未支持的 Cluster 架构……</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request(&#123; <span class="attr">url</span>: packageUrl, <span class="attr">encoding</span>: <span class="literal">null</span> &#125;, (error, resp, body) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span> res.report_error(error);</span><br><span class="line">  res.set(<span class="string">'Content-Type'</span>, resp.headers[<span class="string">'content-type'</span>]);</span><br><span class="line">  <span class="keyword">return</span> res.send(body);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>再者，结合自身情况，可以尝试更多玩法。如果系统内存富足，把 stream 稍微改一改，变为回调形式。缺点和 Verdaccio 一样的是必须等 resp 完整返回，但 <code>encoding: null</code> 确保响应结果为 buffer，能省略 JSON 解析，优点是可以基于 buffer 做 LRU Cache。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;这里的 &lt;a href=&quot;https://github.com/verdaccio/verdaccio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Verdaccio&lt;/a&gt; 是指用于搭建轻量级 npm 私有仓库的开源解决方案，以下简称 npm 私服。&lt;/p&gt;
&lt;p&gt;近期观察发现，有些项目依赖了名为 &lt;code&gt;npm&lt;/code&gt; 的 npm 包，每次项目部署时都会向私服 &lt;code&gt;/npm&lt;/code&gt; 发起请求记录，并在监控曲线上呈明显的高耗时，这引起了我们的关注。&lt;/p&gt;
&lt;p&gt;有些项目依赖了 npm 自身的包，每次项目部署时都会产生对私服 &lt;code&gt;/npm&lt;/code&gt; 路由的请求记录，并在监控曲线上呈明显的高耗时，这引起了我们的关注。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/tags/Node-js/"/>
    
      <category term="npm" scheme="http://claude-ray.com/tags/npm/"/>
    
      <category term="Verdaccio" scheme="http://claude-ray.com/tags/Verdaccio/"/>
    
      <category term="private npm registry" scheme="http://claude-ray.com/tags/private-npm-registry/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP DataLab 题解</title>
    <link href="http://claude-ray.com/2019/10/02/csapp-datalab/"/>
    <id>http://claude-ray.com/2019/10/02/csapp-datalab/</id>
    <published>2019-10-02T15:19:44.000Z</published>
    <updated>2019-10-03T05:56:29.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DataLab"><a href="#DataLab" class="headerlink" title="DataLab"></a>DataLab</h1><p>近来开始读 CS:APP3e 第二章，但干看书做课后题太乏味，于是提前把 DataLab 拉出来练练。不一定是优解，趁热记录一下思路吧。</p><a id="more"></a><blockquote><p>如果读者是那种还没做完 lab 就想借鉴答案的，还请收手，坚持独立完成吧，正如课程作者所说，<code>Don&#39;t cheat, even the act of searching is checting.</code></p></blockquote><h2 id="bitXor"><a href="#bitXor" class="headerlink" title="bitXor"></a>bitXor</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~(~(x &amp; ~y) &amp; ~(~x &amp; y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的公式可以写作 <code>(x &amp; y) | (~x &amp; y)</code> ，但题目要求只能用 ~ &amp; 两种操作，换句话就是考察用 ~ &amp; 来实现 | 操作，和逻辑与或非类似。</p><h2 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * tmin - return minimum two's complement integer </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题目就是计算出 <code>0x80000000</code> ，基本的移位操作即可，不用复杂化。</p><h2 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two's complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !(~(<span class="number">1</span> &lt;&lt; <span class="number">31</span>) ^ x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面已经知道怎么获取 TMIN，TMAX 可以用 ~TMIN 表示，因此主要考察两个数是否相等 —— <code>^</code>。</p><h2 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> odd = (<span class="number">0xAA</span> &lt;&lt; <span class="number">24</span>) + (<span class="number">0xAA</span> &lt;&lt; <span class="number">16</span>) + (<span class="number">0xAA</span> &lt;&lt; <span class="number">8</span>) + <span class="number">0xAA</span>;</span><br><span class="line">  <span class="keyword">return</span> !((x &amp; odd) ^ odd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先构造 <code>0xAAAAAAAA</code>，利用 &amp; 操作将所有奇数位提出来，再和已构造的数判等。</p><h2 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * negate - return -x </span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二进制基础扎实的话，可以秒出结果。</p><h2 id="isAsciiDigit"><a href="#isAsciiDigit" class="headerlink" title="isAsciiDigit"></a>isAsciiDigit</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9')</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* (x - 0x30 &gt;= 0) &amp;&amp; (0x39 - x) &gt;=0 */</span></span><br><span class="line">  <span class="keyword">int</span> TMIN = <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">return</span> !((x + ~<span class="number">0x30</span> + <span class="number">1</span>) &amp; TMIN) &amp; !((<span class="number">0x39</span> + ~x + <span class="number">1</span>) &amp; TMIN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要思路可以用逻辑运算表示，<code>(x - 0x30 &gt;= 0) &amp;&amp; (0x39 - x) &gt;=0</code>，这里新概念是如何判断数值是否小于 0。</p><h2 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a>conditional</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> f = ~(!x) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> of = ~f;</span><br><span class="line">  <span class="keyword">return</span> ((f ^ y) &amp; of) | ((of ^ z) &amp; f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我用 <code>~(!x) + 1</code> 构造了 x 的类布尔表示，如果 x 为真，表达式结果为 0，反之表达式结果为 ~0。</p><h2 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a>isLessOrEqual</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class="line"><span class="comment"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 24</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* (y &gt;=0 &amp;&amp; x &lt;0) || ((x * y &gt;= 0) &amp;&amp; (y + (-x) &gt;= 0)) */</span></span><br><span class="line">  <span class="keyword">int</span> signX = (x &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> signY = (y &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> signXSubY = ((y + ~x + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (signX &amp; ~signY) | (!(signX ^ signY) &amp; !signXSubY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心是判断 <code>y + (-x) &gt;= 0</code>。一开始我做题时被 <code>0x80000000</code> 边界条件烦到了，所以将其考虑进了判断条件。</p><p>具体做法是判断 Y 等于 TMIN 时返回 0，X 等于 TMIN 时返回 1。此外也考虑了若 x 为负 y 为 正返回 1，x 为正 y 为负返回 0。</p><p>这样想得太复杂了，使用的操作有点多，而题目对 ops 限制是 24，担心过不了 dlc 的语法检查。 所以又花更多时间想出更简单的方法。用逻辑操作可以写作 <code>(y &gt;=0 &amp;&amp; x &lt;0) || ((x * y &gt;= 0) &amp;&amp; (y + (-x) &gt;= 0))</code>。不过我后来在 linux 上运行了一下第一种方法，dlc 并没有报错。</p><h2 id="logicalNeg"><a href="#logicalNeg" class="headerlink" title="logicalNeg"></a>logicalNeg</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class="line"><span class="comment"> *              the legal operators except !</span></span><br><span class="line"><span class="comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 4 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sign = (x &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> TMAX = ~(<span class="number">1</span> &lt;&lt; <span class="number">31</span>);</span><br><span class="line">  <span class="keyword">return</span> (sign ^ <span class="number">1</span>) &amp; ((((x + TMAX) &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>) ^ <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x 小于 0 时结果为 1，否则检查 <code>x + TMAX</code> 是否进位为负数。</p><h2 id="howManyBits"><a href="#howManyBits" class="headerlink" title="howManyBits"></a>howManyBits</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two's complement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sign = (x &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> f = ~(!sign) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> of = ~f;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * NOTing x to remove the effect of the sign bit.</span></span><br><span class="line"><span class="comment">   * x = x &lt; 0 ? ~x : x</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  x = ((f ^ ~x) &amp; of) | ((of ^ x) &amp; f);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * We need to get the index of the highest bit 1.</span></span><br><span class="line"><span class="comment">   * Easy to find that if it's even-numbered, `n` will lose the length of 1.</span></span><br><span class="line"><span class="comment">   * But the odd-numvered won't.</span></span><br><span class="line"><span class="comment">   * So let's left shift 1 (for the first 1) to fix this.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  x |= (x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// Get index with bisection.</span></span><br><span class="line">  n += (!!(x &amp; (~<span class="number">0</span> &lt;&lt; (n + <span class="number">16</span>)))) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">  n += (!!(x &amp; (~<span class="number">0</span> &lt;&lt; (n + <span class="number">8</span>)))) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">  n += (!!(x &amp; (~<span class="number">0</span> &lt;&lt; (n + <span class="number">4</span>)))) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">  n += (!!(x &amp; (~<span class="number">0</span> &lt;&lt; (n + <span class="number">2</span>)))) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">  n += !!(x &amp; (~<span class="number">0</span> &lt;&lt; (n + <span class="number">1</span>)));</span><br><span class="line">  <span class="comment">// Add one more for the sign bit.</span></span><br><span class="line">  <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我利用了之前 conditional 的做法，讲 x 为负的情况排除掉，统一处理正整数。统计位数可以采取二分法查找最高位的 1，但做了几轮测试就会发现二分法存在漏位的问题。</p><p>不过这只在偶数位发生，奇数位不受影响。因此为了排除这个影响，我暴力地用 <code>x |= (x &lt;&lt; 1)</code> 的办法让最高位的 1 左移 1 位。 </p><h2 id="floatScale2"><a href="#floatScale2" class="headerlink" title="floatScale2"></a>floatScale2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int's, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">exp</span> = (uf &gt;&gt; <span class="number">23</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="comment">// Special</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0xFF</span>)</span><br><span class="line">    <span class="keyword">return</span> uf;</span><br><span class="line">  <span class="comment">// Denormalized</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> ((uf &amp; <span class="number">0x007fffff</span>) &lt;&lt; <span class="number">1</span>) | (uf &amp; (<span class="number">1</span> &lt;&lt; <span class="number">31</span>));</span><br><span class="line">  <span class="comment">// Normalized</span></span><br><span class="line">  <span class="keyword">return</span> uf + (<span class="number">1</span> &lt;&lt; <span class="number">23</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要简单地取出指数部分，甚至不需要拆解，排除 INF、NaN、非规格化的情况之后，剩下规格化的处理是指数部分的位进一。</p><h2 id="floatFloat2Int"><a href="#floatFloat2Int" class="headerlink" title="floatFloat2Int"></a>floatFloat2Int</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class="line"><span class="comment"> *   for floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Argument is passed as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point value.</span></span><br><span class="line"><span class="comment"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class="line"><span class="comment"> *   0x80000000u.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> TMIN = <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">exp</span> = ((uf &gt;&gt; <span class="number">23</span>) &amp; <span class="number">0xFF</span>) - <span class="number">127</span>;</span><br><span class="line">  <span class="comment">// Out of range</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &gt; <span class="number">31</span>)</span><br><span class="line">    <span class="keyword">return</span> TMIN;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> frac = (uf &amp; <span class="number">0x007fffff</span>) | <span class="number">0x00800000</span>;</span><br><span class="line">  <span class="comment">// Left shift or right shift</span></span><br><span class="line">  <span class="keyword">int</span> f = (<span class="built_in">exp</span> &gt; <span class="number">23</span>) ? (frac &lt;&lt; (<span class="built_in">exp</span> - <span class="number">23</span>)) : (frac &gt;&gt; (<span class="number">23</span> - <span class="built_in">exp</span>));</span><br><span class="line">  <span class="comment">// Sign</span></span><br><span class="line">  <span class="keyword">return</span> (uf &amp; TMIN) ? -f : f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先拆分单精度浮点数的指数和基数，指数部分减去 127 偏移量，用来排除临界条件。大于 31 时，超过 32 位 Two’s Complement 的最大范围，小于 0 则忽略不计，根据题意分别返回 0x80000000 和 0。</p><p>之后根据指数部分是否大于 23 来判断小数点位置。如果大于，说明小数部分全部在小数点左边，需要左移；如果小于则需要右移。最后补上符号位。</p><h2 id="floatPower2"><a href="#floatPower2" class="headerlink" title="floatPower2"></a>floatPower2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class="line"><span class="comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class="line"><span class="comment"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class="line"><span class="comment"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class="line"><span class="comment"> *   0. If too large, return +INF.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class="line"><span class="comment"> *   Max ops: 30 </span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">exp</span> = x + <span class="number">127</span>;</span><br><span class="line">  <span class="comment">// 0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// INF</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &gt;= <span class="number">0xFF</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x7f800000</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加 127 得到指数阶码，超过表示范围则返回 0 和 INF。由于小数点后面都是 0，只需左移指数部分。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>现在 Mac 已无法运行 32 位的代码检查工具 dlc，不过可以先跑逻辑测试，等写完再放到 Linux 机跑一遍 dlc 测试。</p><p>原以为这点知识在学校掌握得还可以，随书习题和前几道 lab 也的确简单，实际做到后面有许多卡壳的点，浮点数的概念都模糊了，真是一边翻书一边做，快两天才完成。书本的这章我还是甭跳了，继续刷去吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DataLab&quot;&gt;&lt;a href=&quot;#DataLab&quot; class=&quot;headerlink&quot; title=&quot;DataLab&quot;&gt;&lt;/a&gt;DataLab&lt;/h1&gt;&lt;p&gt;近来开始读 CS:APP3e 第二章，但干看书做课后题太乏味，于是提前把 DataLab 拉出来练练。不一定是优解，趁热记录一下思路吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Computer System" scheme="http://claude-ray.com/categories/Computer-System/"/>
    
    
      <category term="DataLab" scheme="http://claude-ray.com/tags/DataLab/"/>
    
      <category term="CSAPP" scheme="http://claude-ray.com/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>不靠谱的 Egg.js 框架开发指南</title>
    <link href="http://claude-ray.com/2019/09/17/egg-framework-dev/"/>
    <id>http://claude-ray.com/2019/09/17/egg-framework-dev/</id>
    <published>2019-09-17T11:44:02.000Z</published>
    <updated>2020-02-14T01:18:29.735Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇面向 Egg.js 上层框架开发者的科普文。</p><p>Egg 官网基本做到了呈现所有“必知必会”的内容，再写一份 Egg 使用教程已经毫无必要，不如聊聊 Egg 上层框架开发过程中可能有用的技巧。</p><a id="more"></a><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>深入浅出的官网和专栏分享</p><ul><li><a href="https://eggjs.org" target="_blank" rel="noopener">eggjs.org</a></li><li><a href="https://www.yuque.com/egg/nodejs" target="_blank" rel="noopener">yuque.com/egg/nodejs</a></li><li><a href="https://zhuanlan.zhihu.com/eggjs" target="_blank" rel="noopener">zhuanlan.zhihu.com/eggjs</a></li></ul><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>阅读源码的必经之路</p><ul><li>egg-core</li><li>egg-cluster</li></ul><h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><ul><li>egg-scripts: 用于生产环境的部署工具</li><li>egg-bin: 开发环境的 debug、test、coverage</li><li>ets: egg-ts-helper，用于辅助 egg ts 项目生成 .d.ts 声明文件，为 egg 的 ts 开发提供友好的智能提示，已经被 egg-bin 内部集成</li><li>egg-init: egg 的脚手架初始化工具，框架开发者总是需要搭建自己的脚手架，因此这个可以仅作了解，我们并不会使用。自 npm@6 以后，增加了 npm-init 的新特性<ul><li>npm init foo -&gt; npx create-foo</li><li>npm init @usr/foo -&gt; npx @usr/create-foo</li><li>npm init @usr -&gt; npx @usr/create</li></ul></li></ul><h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><ul><li>egg-mock: 提供了完整的 mock 代码，测试 API 来自 supertest</li></ul><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>进阶 Egg 的步骤包括但不限于通读官网文档，至少要熟悉下面两个话题才能算了解了 Egg。</p><ul><li><p><a href="https://eggjs.org/zh-cn/core/cluster-and-ipc.html" target="_blank" rel="noopener">多进程模型</a></p></li><li><p><a href="https://eggjs.org/zh-cn/advanced/loader.html" target="_blank" rel="noopener">loader &amp;&amp; 生命周期</a></p></li></ul><h1 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h1><p>接下来是几个或多或少官网没有讲到的话题。</p><h2 id="平滑重启"><a href="#平滑重启" class="headerlink" title="平滑重启"></a>平滑重启</h2><p>Egg 的多进程模型决定了 PM2 这样的进程管理工具对它意义不大。可惜的是没有了 PM2，我们也失去了 pm2 reload 这样轻量的平滑重启方案，鉴于 Egg 应用不短的启动时长，必须在流量进入 Node.js 之前加以控制。</p><p>对有强力运维的团队来讲，server 的启动时间不是问题，问题是还有不少 Node.js 项目只有一层代理甚至是裸运行的，又不想给运维加钱。对此最基本的建议是前置 nginx ，在配置多个节点的 upstream 之后，默认的选服策略就带上了容错机制。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com       weight=<span class="number">5</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">60s</span>;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com:<span class="number">8080</span>  weight=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server</span> backup1.example.com:<span class="number">8080</span>   backup;</span><br><span class="line">    <span class="attribute">server</span> backup2.example.com:<span class="number">8080</span>   backup;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说，fail_timeout 默认 (10s) 就可以提供一个 “server backend 被 nginx 判定不可用之后，10s 之内不会有新的请求发送到该地址” 的缓冲期。</p><p>参考 nginx 的配置说明，酌情调整 <code>max_fails</code>、<code>fail_timeout</code> 等参数，为服务提供一个基本但可靠的稳定保障吧。</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="egg-router-vs-koa-router"><a href="#egg-router-vs-koa-router" class="headerlink" title="egg-router vs koa-router"></a>egg-router vs koa-router</h3><p>egg-router 的逻辑基于 koa-router，早期直接引用 koa-router，在其基础上封装了 Egg.js 应用的路由注册，以及其他小特性。 后来 egg-router 从 egg-core 中剥离，并更改维护方式为 fork（koa-router 的维护度太低了），但没有做 breaking changes。两者的主要差别如下，稍后会做详细介绍：</p><ul><li>RESTful</li><li>默认大小写敏感</li></ul><h3 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h3><p>koa-router 提供了比较基础的 RESTful API 支持，<code>.get|put|post|patch|delete|del</code>。</p><p>Egg 实现了一套应用较广的约定，以便在 Egg 应用中快速编写 RESTful CRUD。</p><p><code>app.resources(&#39;routerName&#39;, &#39;pathMatch&#39;, controller)</code></p><table><thead><tr><th>Method</th><th>Path</th><th>Route Name</th><th>Controller.Action</th></tr></thead><tbody><tr><td>GET</td><td>/posts</td><td>posts</td><td>app.controllers.posts.index</td></tr><tr><td>GET</td><td>/posts/new</td><td>new_post</td><td>app.controllers.posts.new</td></tr><tr><td>GET</td><td>/posts/:id</td><td>post</td><td>app.controllers.posts.show</td></tr><tr><td>GET</td><td>/posts/:id/edit</td><td>edit_post</td><td>app.controllers.posts.edit</td></tr><tr><td>POST</td><td>/posts</td><td>posts</td><td>app.controllers.posts.create</td></tr><tr><td>PUT</td><td>/posts/:id</td><td>post</td><td>app.controllers.posts.update</td></tr><tr><td>DELETE</td><td>/posts/:id</td><td>post</td><td>app.controllers.posts.destroy</td></tr></tbody></table><p>举例如下，根据以上映射关系，在 <code>app/controller/post.js</code> 中选择性地实现相应方法即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.resources(<span class="string">'/posts'</span>, <span class="string">'posts'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>route name 是 koa-router 就定义了的可选参数，如果指定了 route name，当路由匹配成功时，会将此 name 赋值给 ctx._matchedRouteName</p></blockquote><h3 id="sensitive"><a href="#sensitive" class="headerlink" title="sensitive"></a>sensitive</h3><p>Egg 在创建 router 的时候传递了 sensitive=true 的选型，在 koa-router 中开启了大小写敏感。<br> <a href="https://github.com/eggjs/egg-core/blob/master/lib/egg.js#L301" target="_blank" rel="noopener">sensitive=true</a></p><h3 id="Radix-Tree"><a href="#Radix-Tree" class="headerlink" title="Radix Tree"></a>Radix Tree</h3><p>Radix Tree 是一种基于前缀的查找算法，Golang 的 echo、gin 等 web 框架的路由匹配都使用了该算法。</p><p>而 egg-router(koa-router) 以及 express router 均采用传统的正则匹配，具体做法是用 path-to-regexp 将路由转化为正则表达式，路由寻址就是遍历查找符合当前路径的路由的过程。</p><p>对比基于两种算法的路由查找效率，Radix Tree 更占优势，并且 url 越长，路由数量越多，性能差距越大。</p><p>以下是 10000 个路由情况下主流路由中间件的性能比拼，数据截选自 <code>koa-rapid-router</code> 。</p><p>静态路由</p><table><thead><tr><th>Architecture</th><th>Latency</th><th>Req/Sec</th><th>Bytes/Sec</th></tr></thead><tbody><tr><td><code>koa + koa-router</code></td><td>245.07 ms</td><td>394.25</td><td>56 kB</td></tr><tr><td><code>fastify</code></td><td>1.96 ms</td><td>49324</td><td><strong>7 MB</strong></td></tr></tbody></table><p>动态路由</p><table><thead><tr><th>Architecture</th><th>Latency</th><th>Req/Sec</th><th>Bytes/Sec</th></tr></thead><tbody><tr><td><code>koa + koa-router</code></td><td>220.29 ms</td><td>441.75</td><td>62.7 kB</td></tr><tr><td><code>fastify</code></td><td>1.9 ms</td><td>50988.65</td><td><strong>7.24 MB</strong></td></tr></tbody></table><p>那为什么不全面使用 Radix Tree 呢？其实只有少数涉及大量路由和性能的场景，如 npm registery。</p><p>如果项目真的有如此性能需要，恐怕你不得不考虑用该算法编写的路由中间件来取代默认的 egg-router 了。</p><h2 id="引入-Elastic-APM"><a href="#引入-Elastic-APM" class="headerlink" title="引入 Elastic APM"></a>引入 Elastic APM</h2><h3 id="如何支持-egg-框架"><a href="#如何支持-egg-框架" class="headerlink" title="如何支持 egg 框架"></a>如何支持 egg 框架</h3><p>需求：elastic-apm hook 必须在 Egg 和 egg-router 被 require 前完成加载。</p><p>之前有一篇更详细的文章《<a href="http://claude-ray.com/2019/07/12/elastic-apm-node-egg/">elastic-apm-node 扩展篇 —— Egg</a>》，适用于 Egg 应用层的 APM 接入。而在框架层则简单许多，可以直接在框架入口文件做此处理，应用开发者无须再关心这个包的处理细节。</p><h3 id="ts-项目启动卡住"><a href="#ts-项目启动卡住" class="headerlink" title="ts 项目启动卡住"></a>ts 项目启动卡住</h3><p>由于 egg-bin 内置的 ets (egg-ts-helper) 会用子进程同步地预加载一部分 ts 代码用作检查，apm 会被顺势加载，如果配置的环境变量或 serverUrl 字段有误，导致访问无法连通的 apm-server，最终会让该子进程挂起，ets 无法正常退出。</p><blockquote><p>ets 只在 <code>egg-bin start/dev/debug</code> 启动 ts 项目时生效，不会影响线上经过编译的 js <code>egg-script start</code> 启动。</p></blockquote><p>针对上述情况，增加了默认不在 ets 编译过程启动的处理，特征是存在 <code>ETS_REGISTER_PID</code> 环境变量。因此实际上运行调试和测试时都不会开启 apm。</p><p>同时单独运行 <code>ets</code> 时没有上述变量，因此将 NODE_ENV 为 undefined 的环境也排除。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> enableAPM = process.env.APM_ENABLE || (!process.env.ETS_REGISTER_PID &amp;&amp; process.env.NODE_ENV);</span><br><span class="line"><span class="keyword">if</span> (enableAPM) &#123;</span><br><span class="line">  <span class="keyword">const</span> isDev = process.env.APM_DEV === <span class="string">'true'</span> || process.env.NODE_ENV !== <span class="string">'production'</span>;</span><br><span class="line">  apm.start(&#123; isDev &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="框架仓库管理"><a href="#框架仓库管理" class="headerlink" title="框架仓库管理"></a>框架仓库管理</h2><p>在 npm 官方提供 momorepo 的正式支持之前，我们可以使用 Lerna 作为统一的框架、插件管理工具。</p><p>对于我们日常需要的 npm 管理操作，Lerna 并没有引入太多额外的使用成本，并且可以通过 npm 指令一一封装。</p><p>使用方式其实非常灵活，按团队的习惯来就好。如果之前没有使用过，可以参考 midway/scripts 下的 Lerna <a href="https://github.com/midwayjs/midway/blob/master/scripts" target="_blank" rel="noopener">脚本</a>，并且可以在 CI 构建过程中执行版本更迭和发布。</p><h2 id="获取实时-ctx"><a href="#获取实时-ctx" class="headerlink" title="获取实时 ctx"></a>获取实时 ctx</h2><p>框架开发时遇到了一个少见情况，需要通过 Egg 的 app 对象获取当前上下文的 ctx 对象，用于在特别插件的中间件函数中定位 Egg 的上下文，以实现插件日志挂载到 ctx 对象。</p><blockquote><p>其实这是一个没什么用的需求 :)</p></blockquote><p>听起来比较绕，举个例子，在 egg 中使用 dubbo2.js —— 引入的方式参考 dubbo2.js 和 egg 的集成指引文档，并在其中使用中间件扩展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;plugin_root&#125; ./app.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dubbo = Dubbo.from(&#123;....&#125;);</span><br><span class="line">  app.beforeStart(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    dubbo.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">      <span class="keyword">await</span> next();</span><br><span class="line">      <span class="keyword">const</span> endTime = <span class="built_in">Date</span>.now();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'costtime: %d'</span>, endTime - startTime);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> dubbo.ready();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'dubbo was ready...'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的 ctx 并不属于 egg 创建的 ctx，两者之间相互隔离。唯一能让两者产生联系的，就是使用闭包中的 app。</p><p>于是有了 <code>egg-current-ctx</code> 这个模块，借助 app.currentCtx 方法，可以将两种 ctx 联系起来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dubbo = Dubbo.from(&#123;....&#125;);</span><br><span class="line">  app.beforeStart(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    dubbo.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">      <span class="keyword">const</span> eggCtx = app.currentCtx;</span><br><span class="line">      <span class="comment">// 对 eggCtx 处理</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">''</span>, eggCtx.query);</span><br><span class="line">      <span class="keyword">await</span> next();</span><br><span class="line">      <span class="keyword">const</span> endTime = <span class="built_in">Date</span>.now();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'costtime: %d'</span>, endTime - startTime);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> dubbo.ready();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'dubbo was ready...'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想把 dubbo2.js 中 ctx 的属性挂载到 egg 的 ctx 上，这个没什么卵用的插件就能散发一点温度。</p><p>感兴趣的可以看 egg-current-ctx 的<a href="https://github.com/Claude-Ray/egg-current-ctx" target="_blank" rel="noopener">代码实现</a>，基于 async_hooks。</p><h2 id="发布加速"><a href="#发布加速" class="headerlink" title="发布加速"></a>发布加速</h2><p>Egg + ts 应用具备 150M 起步的 node_modules，再加上网络原因（和小水管 npm 私服），安装、拷贝速度十分感人。</p><p>如何提速？</p><blockquote><p>这里旨在提供解决思路，一定有更好的方案，欢迎交流指正</p></blockquote><ol><li><p>node_modules 不再每次都安装，打包平台和线上环境缓存第一次安装的依赖。(参考 travis-ci)</p></li><li><p>针对前一点的改进，node_modules 安装在代码目录上层，发布平台只拷贝代码，版本号式迭代。</p><p> 可是目录层级的处理在 Egg 项目上略显吃力，需要一套完整的项目和测试用例协助试错。因为 egg-utils 等工具类的底层代码将 node_modules 目录层级写得太死了。</p><p> 举个例子，<code>egg-utils/lib/framework.js 66L</code> ，导致无法查找上层 node_modules 里的 egg 依赖</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assertAndReturn</span>(<span class="params">frameworkName, moduleDir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> moduleDirs = <span class="keyword">new</span> <span class="built_in">Set</span>([</span><br><span class="line">    moduleDir,</span><br><span class="line">    <span class="comment">// find framework from process.cwd, especially for test,</span></span><br><span class="line">    <span class="comment">// the application is in test/fixtures/app,</span></span><br><span class="line">    <span class="comment">// and framework is install in $&#123;cwd&#125;/node_modules</span></span><br><span class="line">    path.join(process.cwd(), <span class="string">'node_modules'</span>),</span><br><span class="line">    <span class="comment">// prevent from mocking process.cwd</span></span><br><span class="line">    path.join(initCwd, <span class="string">'node_modules'</span>),</span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> moduleDir <span class="keyword">of</span> moduleDirs) &#123;</span><br><span class="line">    <span class="keyword">const</span> frameworkPath = path.join(moduleDir, frameworkName);</span><br><span class="line">    <span class="keyword">if</span> (fs.existsSync(frameworkPath)) <span class="keyword">return</span> frameworkPath;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;frameworkName&#125;</span> is not found in <span class="subst">$&#123;<span class="built_in">Array</span>.<span class="keyword">from</span>(moduleDirs)&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>npm 私服优化。修改上游镜像是一方面，自建的服务如果无法支持多节点多进程，也很容易成为安装依赖的性能瓶颈。假如使用 verdaccio 的本地存储模式，将很难得到官方 cluster 方案支持，除非你购买了 google cloud 或 aws s3。</p></li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://github.com/chenshenhai/eggjs-note" target="_blank" rel="noopener">chenshenhai/eggjs-note</a></li><li><a href="https://github.com/cevio/koa-rapid-router" target="_blank" rel="noopener">koa-rapid-router</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇面向 Egg.js 上层框架开发者的科普文。&lt;/p&gt;
&lt;p&gt;Egg 官网基本做到了呈现所有“必知必会”的内容，再写一份 Egg 使用教程已经毫无必要，不如聊聊 Egg 上层框架开发过程中可能有用的技巧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/tags/Node-js/"/>
    
      <category term="Egg" scheme="http://claude-ray.com/tags/Egg/"/>
    
  </entry>
  
  <entry>
    <title>如何解决 Debian 系 Elastic apm-server 7.x 启动失败</title>
    <link href="http://claude-ray.com/2019/09/13/apm-server-startup-troubleshooting/"/>
    <id>http://claude-ray.com/2019/09/13/apm-server-startup-troubleshooting/</id>
    <published>2019-09-13T03:55:57.000Z</published>
    <updated>2019-09-13T12:15:13.955Z</updated>
    
    <content type="html"><![CDATA[<p>本来是几个月前在 Ubuntu 部署 Elastic apm-server 遇到的问题，当时处理起来没遇到特别的卡点，就只是把解决过程丢到 Evernote 了。最近发现还有人在重复踩这个坑，因此我把笔记整理之后搬到这里作一个极简的分享。</p><a id="more"></a><h1 id="apm-server-安装"><a href="#apm-server-安装" class="headerlink" title="apm-server 安装"></a>apm-server 安装</h1><p>实际步骤就不需要我复述了，官方提供现成的 deb 安装包。除了查看官方文档，更推荐使用 Kibana APM 看板自带的指南。</p><p>指南的 url 路径大概是 <a href="http://localhost:5601/app/kibana#/home/tutorial/apm?_g=()" target="_blank" rel="noopener">http://localhost:5601/app/kibana#/home/tutorial/apm?_g=()</a></p><p>不仅有安装引导，还提供按钮协助检查 apm-server 的服务状态。</p><p><img src="/image/apm-server-startup-troubleshooting/kibana-apm-server-tutorial.png" alt="Kibana apm-server tutorial"></p><h1 id="启动异常"><a href="#启动异常" class="headerlink" title="启动异常"></a>启动异常</h1><p>在 debian 系发行版安装 apm-server 后，执行 <code>service apm-server start</code> 报告失败，且切换到 <code>systemctl</code> 也无效。</p><p><code>service apm-server status</code>报错如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ service apm-server status                                                                                          </span><br><span class="line">● apm-server.service - Elastic APM Server                                                                               </span><br><span class="line">   Loaded: loaded (/lib/systemd/system/apm-server.service; enabled; vendor preset: enabled)                             </span><br><span class="line">   Active: failed (Result: <span class="built_in">exit</span>-code) since Tue 2019-04-16 14:44:42 CST; 3s ago                                         </span><br><span class="line">     Docs: https://www.elastic.co/solutions/apm                                                                         </span><br><span class="line">  Process: 4783 ExecStart=/usr/share/apm-server/bin/apm-server <span class="variable">$BEAT_LOG_OPTS</span> <span class="variable">$BEAT_CONFIG_OPTS</span> <span class="variable">$BEAT_PATH_OPTS</span> (code=ex</span><br><span class="line"> Main PID: 4783 (code=exited, status=1/FAILURE)                                                                         </span><br><span class="line">                                                                                                                        </span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: apm-server.service: Service hold-off time over, scheduling restart.                     </span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: apm-server.service: Scheduled restart job, restart counter is at 5.                     </span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: Stopped Elastic APM Server.                                                             </span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: apm-server.service: Start request repeated too quickly.                                 </span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: apm-server.service: Failed with result <span class="string">'exit-code'</span>.                                     </span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: Failed to start Elastic APM Server.</span><br></pre></td></tr></table></figure><h1 id="检查日志"><a href="#检查日志" class="headerlink" title="检查日志"></a>检查日志</h1><p>首先使用 <code>journalctl</code> 查看 systemd 的日志，如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ journalctl -u apm-server.service</span><br></pre></td></tr></table></figure><p>打印日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- Logs begin at Wed 2019-04-10 09:30:25 CST, end at Tue 2019-04-16 14:44:42 CST. --                                    </span><br><span class="line">4 月 16 13:43:23 ray systemd[1]: Started Elastic APM Server.                                                             </span><br><span class="line">4 月 16 13:43:23 ray apm-server[2487]: Exiting: error loading config file: config file (<span class="string">"/etc/apm-server/apm-server.yml"</span>)</span><br><span class="line">4 月 16 13:43:23 ray systemd[1]: apm-server.service: Main process exited, code=exited, status=1/FAILURE                  </span><br><span class="line">4 月 16 13:43:23 ray systemd[1]: apm-server.service: Failed with result <span class="string">'exit-code'</span>.                                     </span><br><span class="line">4 月 16 13:43:23 ray systemd[1]: apm-server.service: Service hold-off time over, scheduling restart.                     </span><br><span class="line">4 月 16 13:43:23 ray systemd[1]: apm-server.service: Scheduled restart job, restart counter is at 1.                     </span><br><span class="line">4 月 16 13:43:23 ray systemd[1]: Stopped Elastic APM Server.                                                             </span><br><span class="line">4 月 16 13:43:23 ray systemd[1]: Started Elastic APM Server.</span><br><span class="line"><span class="comment"># ... ，笔者注释，省略中间的多次重启信息</span></span><br><span class="line">4 月 16 14:44:42 ray apm-server[4783]: Exiting: error loading config file: config file (<span class="string">"/etc/apm-server/apm-server.yml"</span>)</span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: apm-server.service: Main process exited, code=exited, status=1/FAILURE</span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: apm-server.service: Failed with result <span class="string">'exit-code'</span>.</span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: apm-server.service: Service hold-off time over, scheduling restart.</span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: apm-server.service: Scheduled restart job, restart counter is at 5.</span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: Stopped Elastic APM Server.</span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: apm-server.service: Start request repeated too quickly.</span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: apm-server.service: Failed with result <span class="string">'exit-code'</span>.</span><br><span class="line">4 月 16 14:44:42 ray systemd[1]: Failed to start Elastic APM Server.</span><br></pre></td></tr></table></figure><p>这样找出真正的启动错误是 <code>Exiting: error loading config file: config file (&quot;/etc/apm-server/apm-server.yml&quot;)</code></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>配置文件异常，采用 <code>apm-server export config</code> 进一步观察。提示如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error initializing beat: error loading config file: config file (<span class="string">"/etc/apm-server/apm-server.yml"</span>) must be owned by the beat user (uid=1000) or root</span><br></pre></td></tr></table></figure><p><a href="https://github.com/elastic/apm-server/issues/2001" target="_blank" rel="noopener">github issues</a> 上找到了类似的问题，但没有给出推荐的处理方案，所以决定自己动手解决。</p><p><code>ls -l</code> 观察 <code>/etc/apm-server/</code> 的信息，发现除了 apm-server.yml 之外，owner 都是 root</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /etc/apm-server</span><br><span class="line">total 148K</span><br><span class="line">drwxr-xr-x   2 root       root       4.0K 4 月  16 14:11 .</span><br><span class="line">drwxr-xr-x 142 root       root        12K 4 月  16 14:11 ..</span><br><span class="line">-rw-------   1 apm-server apm-server  33K 4 月   6 05:48 apm-server.yml</span><br><span class="line">-rw-r--r--   1 root       root        94K 4 月   6 05:48 fields.yml</span><br></pre></td></tr></table></figure><p>那么统一将权限变更到 root 吧！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown root:root /etc/apm-server/apm-server.yml</span><br></pre></td></tr></table></figure><p>改之后测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apm-server <span class="built_in">test</span> config</span><br><span class="line">Config OK</span><br></pre></td></tr></table></figure><p>再尝试启动则提示成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来是几个月前在 Ubuntu 部署 Elastic apm-server 遇到的问题，当时处理起来没遇到特别的卡点，就只是把解决过程丢到 Evernote 了。最近发现还有人在重复踩这个坑，因此我把笔记整理之后搬到这里作一个极简的分享。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://claude-ray.com/categories/Linux/"/>
    
    
      <category term="APM" scheme="http://claude-ray.com/tags/APM/"/>
    
      <category term="Elastic-APM" scheme="http://claude-ray.com/tags/Elastic-APM/"/>
    
      <category term="apm-server" scheme="http://claude-ray.com/tags/apm-server/"/>
    
      <category term="Debian" scheme="http://claude-ray.com/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT 主题升级 7.4</title>
    <link href="http://claude-ray.com/2019/09/12/hexo-theme-next-upgrade-7-4/"/>
    <id>http://claude-ray.com/2019/09/12/hexo-theme-next-upgrade-7-4/</id>
    <published>2019-09-12T12:06:19.000Z</published>
    <updated>2020-02-14T01:18:29.736Z</updated>
    
    <content type="html"><![CDATA[<p>使用 7.1.2 才过了不到 3 个月，我又将博客主题升级了，不过这次是因为 sidebar 出现了统计隐藏的样式 bug，没想到意外赶上了几个特别明显的优化。这次是真的值得所有 NexT 老用户去尝试了。</p><a id="more"></a><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>从我的体验来看，生成页面的耗时直接减半，对比 5 -&gt; 7.1.2 版本升级的提速，效果相当可观。</p><h2 id="定制代码注入"><a href="#定制代码注入" class="headerlink" title="定制代码注入"></a>定制代码注入</h2><p>这个是绝对好评了！目前最常见的维护主题代码的方式就是人工 clone theme-next 到 <code>themes/next</code> 目录，除非 fork 一份仓库自己维护，所有定制的内容必须在 <code>themes/next</code> 目录修改，版本管理混在一起，一旦想升级主题，得挨个检查被自己修改过的文件。</p><p>现在可以将定制代码和原 NexT 主题代码完全隔离，自己添加的修改全都提取到 hexo 站点的 <code>source/_data</code> 目录下。只需要保管好 <code>_config.yml</code>，以后的主题更新方式就轻松地变为一键拉取最新代码。</p><p>注意需要配置开启对应的 <code>custom_file_path</code>，支持的模块如下，几乎全面满足定制需要。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment"># 页面</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment"># 样式</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>可以参考我迁移后的扩展代码：<a href="https://github.com/Claude-Ray/claude-ray.github.io/tree/hexo/source/_data" target="_blank" rel="noopener">https://github.com/Claude-Ray/claude-ray.github.io/tree/hexo/source/_data</a></p><h2 id="使用-em-取代-px"><a href="#使用-em-取代-px" class="headerlink" title="使用 em 取代 px"></a>使用 em 取代 px</h2><p>扩大了自适应的范围，但我实在接受不了它在高分屏下的超大字体，没关系，上面提供的<code>source/_data/variables.styl</code> 可以用来重写 base.styl 中的变量。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Font size</span></span><br><span class="line">$font-size-large          = 1em;</span><br><span class="line">$font-size-larger         = 1.125em;</span><br><span class="line">$font-size-largest        = 1.25em;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Headings font size</span></span><br><span class="line">$font-size-headings-base  = 1.6em;</span><br></pre></td></tr></table></figure><p>以上配置差不多就可以恢复原来的视觉效果了。</p><h2 id="配置结构优化"><a href="#配置结构优化" class="headerlink" title="配置结构优化"></a>配置结构优化</h2><p>关于 <code>sidebar</code> 位置的配置终于可以在所有主题中统一生效了，还有一些其他的简化，迁移配置的时候务必注意对照着修改。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>除了以上明显的特性更新，还有一堆 bug 修复、渲染优化等等，没毛病！</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这次的更新不用等了，尤其前两个优化解决了长久以来的痛点，值得升级。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://claude-ray.com/2019/06/28/hexo-theme-next-upgrade-7/">Hexo NexT 主题升级 7.1.2</a></li><li><a href="https://theme-next.org/" target="_blank" rel="noopener">theme-next.org</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 7.1.2 才过了不到 3 个月，我又将博客主题升级了，不过这次是因为 sidebar 出现了统计隐藏的样式 bug，没想到意外赶上了几个特别明显的优化。这次是真的值得所有 NexT 老用户去尝试了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://claude-ray.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://claude-ray.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>From Journeyman to Master</title>
    <link href="http://claude-ray.com/2019/09/10/from-journeyman-to-master/"/>
    <id>http://claude-ray.com/2019/09/10/from-journeyman-to-master/</id>
    <published>2019-09-10T15:45:17.000Z</published>
    <updated>2020-02-13T16:23:05.624Z</updated>
    
    <content type="html"><![CDATA[<p>《 The Pragmatic Programmer: From Journeyman to Master 》这本书已加入愿望单许久，最近终于在通勤路上读完了。对于处于或将处于熟练工阶段的程序员，毫无疑问这是本值得用心阅读的书，因此我也写一下短评和推荐理由。</p><a id="more"></a><p>作为思想指导性读物，首先它具备不挑剔阅读设备的优点，电子书随处可见的内链（实体书则是页码）可以方便地跳到引用的章节，也能帮读者构建知识的关联体系，因此你可以放心挑选你感兴趣的专题。</p><p>其次，它比《 Code Complete 》更凝练，比《 Unix 编程艺术》更平和。尤其推荐给所有所谓的中级程序员，这一点也体现在了书的副标题上 —— 面向读者为 <code>journeyman</code>，也就是训练有素的熟手。</p><p>虽然中文版将其译为“小工”，私以为也得是足够可靠的小工，更像是许多大牛自谦的说辞，而不代表毫无软件工程基础的 <code>newbie</code>。对于真正的新人而言，阅读此类书籍所遭受的影响可能是深远的，却也可能不及耳旁风。因为随着当代软件工程的普及程度，阅读时多半会觉得这些道理显而易见、理所当然，“几乎都是课堂和应试中学过的”，这种感觉在《 Code Complete 》更甚。建议没有多少工作经验的人，先去读《 Clean Code 》和 《 Refactor 》，实践更为重要，至于编程思考类的读物凭兴趣看一本足以。</p><p>上面是说对未出师的准程序员意义相对较小，而下山历练之人，亲历过绝望的 deadline、妥协的设计以及巨大的屎山，不论将它们克服还是被击败，都更能体会到为何如此常识便是属于大师的技巧与原则。在阅读过程中，就像面向一面镜子自我矫正，你可以不断反思近段时间的行为、状态是否得当。</p><p>接下来分享几个阅读本书的 tips：</p><ul><li>类似《人月神话》，本书用到了大量的比喻，只凭目录的小标题无法直观地理解作者想表达的主旨。放在最后的附录《Quick Reference Guide》原本是用作复习的，但其实它非常值得在正文前初步阅读，作为章节目录的补充，非常契合跳越式阅读的需要。</li><li>英文原版更利于理解作者的思想，透过标题也得承认这一点。</li><li>由于个人记笔记经常疏于回顾，为了提高转化效率，就得强迫自己复习思考。我把《Quick Reference Guide》默背着一字一句地敲了下来，效率不算高，但终究是极短时间内让自己多了一些复习过程，所有不清晰的点也在这一步排除掉了。作为一种输出形式，时间性价比极高。</li></ul><p>然后聊聊对个人印象最深的几个点，虽然不擅长写读后感，但假设有人翻到了这篇博客，希望可以抛砖引玉。</p><ul><li>没有完美的软件，不要任何时候都奉行完美主义，尤其要知道什么时候该停下来。这个对我而言是最为欠缺的，吹毛求疵耗费了大量时间和精力，但从自身角度很难评估哪些时候哪种做法是正确的，正所谓当局者迷。我能想到的对策，除了自省，还必须要走出自己的小圈子，多吸取他人经验。</li><li>不要容忍低劣的设计，留着祸患无穷，盘它，一次不行多来几次，不需要犹豫。我经常认为是自己没有考量好才没有动手，回想起来其实就是犹豫，错失了很多磨练的机会。计算常有遗漏，而踩坑则不然，真动起手来才能弄明白设计者的初衷。只有你不希望为这个软件续命时才可以忽视它……（大误</li><li>提供解决方案，而不是借口。就算心底没想着找借口抵赖，表达方式上也要额外注意，为了提供更有价值的信息，最后解释甚至不解释。这一点可能我做的还好，<del>甩锅是不存在的</del>，而且非常抵触三句之内讲不到重点的沟通。</li></ul><p>原本还想贴一下读书笔记，不然篇幅太短，认真考虑了一下决定不发了，毕竟博客只想放个人产出的东西，书中自有黄金屋，未经加工的笔记还是偷摸着恶心自己吧。</p><p>最后是想对自己说的话。</p><p>事实上我还远未达到熟练工的程度，遇到没挑战的事只能代表未跳出舒适区。矫正可以帮助自己找到舒适区，而破除壁障，需要在技术根本上出力。最近手痒又折腾起周边工具，看一些效率宝典（包括开篇这本书），想寻求新的突破，久而久之其实也是一种逃避。是时候直面最大的舒适区，把焦点回到编码上，突破更多的自我设限，Keep your mind sharp！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《 The Pragmatic Programmer: From Journeyman to Master 》这本书已加入愿望单许久，最近终于在通勤路上读完了。对于处于或将处于熟练工阶段的程序员，毫无疑问这是本值得用心阅读的书，因此我也写一下短评和推荐理由。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Essay" scheme="http://claude-ray.com/categories/Essay/"/>
    
    
      <category term="Books" scheme="http://claude-ray.com/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>Mac 上移除 EasyConnect 常驻后台进程</title>
    <link href="http://claude-ray.com/2019/08/24/remove-easyconnect-daemons-on-mac/"/>
    <id>http://claude-ray.com/2019/08/24/remove-easyconnect-daemons-on-mac/</id>
    <published>2019-08-23T17:20:41.000Z</published>
    <updated>2019-10-18T06:47:53.828Z</updated>
    
    <content type="html"><![CDATA[<p>想必大家已经知道，EasyConnect 会在后台强行添加名为 EasyMonitor 的开机自启守护进程，网上已经有关闭教程了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl unload /Library/LaunchDaemons/com.sangfor.EasyMonitor.plist</span><br></pre></td></tr></table></figure><p>可实际上 EasyConnect 还启动了另一个“杀不掉”的后台进程 ECAgent，活动频率很低，似乎不会造成内存泄漏，略显不起眼。但这无法作为它肆意常驻的理由。</p><a id="more"></a><h1 id="禁用"><a href="#禁用" class="headerlink" title="禁用"></a>禁用</h1><p>首先找到 plist 文件，在 <code>/Library/LaunchAgents/com.sangfor.ECAgentProxy.plist</code>。它无法被 launchctl unload，不过没关系，你可以直接把它挪走或删除，并且今后都不再需要它。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /Library/LaunchAgents/com.sangfor.ECAgentProxy.plist ~</span><br></pre></td></tr></table></figure><p>当然这时候它还是不能被 kill 掉，要想从 launchctl 中删除而不重启电脑，可以采用 launchctl remove。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl remove com.sangfor.ECAgentProxy</span><br></pre></td></tr></table></figure><h1 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h1><p>关闭后台进程之后，启动 EasyConnect 会弹出警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alert</span><br><span class="line"></span><br><span class="line">Initialization failed. Please try reinstalling!</span><br></pre></td></tr></table></figure><p>没办法，只能向恶势力低头，需要使用时，必须重新加载 EasyMonitor。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EasyConnect v7.6.7 开始 EasyMonitor 必须在 root 权限下运行，此前版本可以不加 sudo</span></span><br><span class="line">sudo launchctl load /Library/LaunchDaemons/com.sangfor.EasyMonitor.plist</span><br></pre></td></tr></table></figure><p>而 ECAgent 就没这么麻烦了，它根本不必后台常驻 —— EasyConnect 启动时会自己创建一个，并且会随着 EasyConnect 进程一起退出。最终我删掉了 <code>com.sangfor.ECAgentProxy.plist</code> 文件的备份。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://blog.jiayx.net/archives/274.html" target="_blank" rel="noopener">Mac 下禁用开机自启软件</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想必大家已经知道，EasyConnect 会在后台强行添加名为 EasyMonitor 的开机自启守护进程，网上已经有关闭教程了&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo launchctl unload /Library/LaunchDaemons/com.sangfor.EasyMonitor.plist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可实际上 EasyConnect 还启动了另一个“杀不掉”的后台进程 ECAgent，活动频率很低，似乎不会造成内存泄漏，略显不起眼。但这无法作为它肆意常驻的理由。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="http://claude-ray.com/categories/Mac/"/>
    
    
      <category term="EasyConnect" scheme="http://claude-ray.com/tags/EasyConnect/"/>
    
      <category term="EasyMonitor" scheme="http://claude-ray.com/tags/EasyMonitor/"/>
    
      <category term="ECAgent" scheme="http://claude-ray.com/tags/ECAgent/"/>
    
  </entry>
  
  <entry>
    <title>Nginx SWRR 算法解读</title>
    <link href="http://claude-ray.com/2019/08/10/nginx-swrr/"/>
    <id>http://claude-ray.com/2019/08/10/nginx-swrr/</id>
    <published>2019-08-10T05:13:49.000Z</published>
    <updated>2019-09-12T10:45:26.125Z</updated>
    
    <content type="html"><![CDATA[<p>Smooth Weighted Round-Robin (SWRR) 是 nginx 默认的加权负载均衡算法，它的重要特点是平滑，避免低权重的节点长时间处于空闲状态，因此被称为平滑加权轮询。</p><blockquote><p>该算法来自 nginx 的一次 commit：<a href="https://github.com/phusion/nginx/commit/27e94984486058d73157038f7950a0a36ecc6e35" target="_blank" rel="noopener">Upstream: smooth weighted round-robin balancing</a></p></blockquote><p>在阅读之前，你应该已经了解过 nginx 的几种负载均衡算法，并阅读了 SWRR 的实现。</p><p>介绍此算法的文章有很多，但还没发现哪里用数学角度给出证明过程的，虽然并不复杂，这里把自己粗劣的思路分享一下。为了便于理解，只考虑算法核心的 current_weight，忽略受异常波动影响的 effective_weight。</p><a id="more"></a><hr><p>假设有三个服务器节点 A B C，它们的权重分别为 Wa、Wb、Wc 并保持不变。根据 SWRR 算法，用 CWa CWb CWc 分别表示每台服务器的当前权重，初始值均为 0。Wn 表示所有服务器节点权重的总和，即 Wn = Wa + Wb + Wc。</p><p>每次开始选择，各节点的 CW 会增加对应 W 值的大小。从中选择 CW 最大的节点，并将其值减去 Wn。</p><p>不妨设 A 为权重最大的节点，首次开始选择时，当前权重均为 0</p><table><thead><tr><th>CWa</th><th>CWb</th><th>CWc</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><p>经过加权</p><table><thead><tr><th>CWa</th><th>CWb</th><th>CWc</th></tr></thead><tbody><tr><td>Wa</td><td>Wb</td><td>Wc</td></tr></tbody></table><p>W 中最大值为 Wa，减去 Wn，可以表示为 CWa = Wa - Wn = 0 - (Wb + Wc)</p><table><thead><tr><th>CWa</th><th>CWb</th><th>CWc</th></tr></thead><tbody><tr><td>1 * Wa - Wn * 1</td><td>Wb</td><td>Wc</td></tr><tr><td>-(Wb+Wc)</td><td>Wb</td><td>Wc</td></tr></tbody></table><p>依此类推，第二次选择之后，CW 变为</p><table><thead><tr><th>CWa</th><th>CWb</th><th>CWc</th></tr></thead><tbody><tr><td>2 * Wa - Wn * 2</td><td>2 * Wb</td><td>2 * Wc</td></tr></tbody></table><p>根据算法，无论选择哪个节点，每次轮询的操作等于降低最大的权重，逐步提高最小值的权重，但 CW 的总和始终为 0。</p><p>不妨设 n = n1 + n2 + n3，每次选择的结果都可以表示为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 &#x3D; n * Wa + n * Wb + n * Wc - n * Wn</span><br><span class="line">  &#x3D; (n * Wa - n1 * Wn) + (n * Wb - n2 * Wn) + (n * Wc - n3 * Wn)</span><br><span class="line">  &#x3D; (n ＊ Wa - n * Wn) + Wb + n * Wc</span><br></pre></td></tr></table></figure><p>第 n 次选择之后，CW 等同于</p><table><thead><tr><th>CWa</th><th>CWb</th><th>CWc</th></tr></thead><tbody><tr><td>n * Wa - Wn * n</td><td>n * Wb</td><td>n * Wc</td></tr></tbody></table><p>因此当选择次数达到 Wn 时，平衡关系为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Wn * 0 &#x3D; Wn * (Wa + Wb + Wc - Wn)</span><br><span class="line">       &#x3D; (Wn * Wa - Wa * Wn) + (Wn * Wb - Wb * Wn) + (Wn * Wc - Wc * Wn)</span><br></pre></td></tr></table></figure><p>此时 CW 又重新回到 0 的起点，证得此轮询是一个周期，且周期长度等于权重之和，每个节点分别被选中了等于各自权重值的次数。</p><p>更多节点的证明同上。</p><hr><p>相比普通的轮询选择，高权重的节点在此过程中不断让权给低权节点，实现平滑轮询。</p><p>至于增加了的 effective_weight 概念，变数在于每次选中后 CW 减去的 Wn 总权重变为总当前权重。随着代码阅读很容易理解，就不单独证明了。</p><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p>碰巧读到了这篇 <a href="https://tenfy.cn/2018/11/12/smooth-weighted-round-robin/" target="_blank" rel="noopener">nginx平滑的基于权重轮询算法分析</a>，里面证明严谨多了，XD，是我之前想看的数学推理，在此推荐。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Smooth Weighted Round-Robin (SWRR) 是 nginx 默认的加权负载均衡算法，它的重要特点是平滑，避免低权重的节点长时间处于空闲状态，因此被称为平滑加权轮询。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该算法来自 nginx 的一次 commit：&lt;a href=&quot;https://github.com/phusion/nginx/commit/27e94984486058d73157038f7950a0a36ecc6e35&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Upstream: smooth weighted round-robin balancing&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在阅读之前，你应该已经了解过 nginx 的几种负载均衡算法，并阅读了 SWRR 的实现。&lt;/p&gt;
&lt;p&gt;介绍此算法的文章有很多，但还没发现哪里用数学角度给出证明过程的，虽然并不复杂，这里把自己粗劣的思路分享一下。为了便于理解，只考虑算法核心的 current_weight，忽略受异常波动影响的 effective_weight。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://claude-ray.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://claude-ray.com/tags/Nginx/"/>
    
      <category term="load balance" scheme="http://claude-ray.com/tags/load-balance/"/>
    
  </entry>
  
  <entry>
    <title>记一次 Node.js 进程挂起的 BUG 追踪</title>
    <link href="http://claude-ray.com/2019/08/08/node-process-hang-up/"/>
    <id>http://claude-ray.com/2019/08/08/node-process-hang-up/</id>
    <published>2019-08-08T13:31:02.000Z</published>
    <updated>2020-02-14T01:18:29.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先把干货放前面，辅助排查的 npm 模块有：<a href="https://github.com/myndzi/wtfnode" target="_blank" rel="noopener">wtfnode</a>，why-is-node-running，active-handles 等，使用方法差不多如下，可以查看各自的文档。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wtf = <span class="built_in">require</span>(<span class="string">'wtfnode'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// your codes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// track down</span></span><br><span class="line">wtf.dump();</span><br></pre></td></tr></table></figure><p>也可以更深入地排查，因为上述模块的核心都是 Node.js 文档未标注的两个接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">process._getActiveHandles();</span><br><span class="line">process._getActiveRequests();</span><br></pre></td></tr></table></figure><p>好了，本篇到这里结束了，剩下的内容，劝你还是跳过吧：流水帐警告⚠️️ 翻车警告⚠️️</p><a id="more"></a><h1 id="问题经过"><a href="#问题经过" class="headerlink" title="问题经过"></a>问题经过</h1><p>背景是为 ts + egg 项目引入 apm 探针，由于 apm 必须在“启动文件”的第一行完成加载，即整个 egg 的生命周期开始之前，因此需要使用独立的脚本或指令进行启动。具体如何处理可以参考这篇<a href="http://claude-ray.com/2019/07/12/elastic-apm-node-egg">博客</a>。</p><p>问题就出在脱离了 egg 的声明周期，得额外管理不同运行环境下 apm-server（APM 数据采集服务器）的地址配置。可能第一时间就能想到 Node.js 的环境变量，思路没错，毕竟程序和 egg-bin 绑定，NODE_ENV 环境变量的命名符合规范，主要为 development、test、production。特定环境读取特定的即可。</p><p>但调试过程中，写错了 apm-server 路径，遇到了进程启动过程中卡住的现象。解决起来很容易，但好奇是什么原因造成的，因为正常引入 elastic-apm-node 并填写一个错误的 url 并不妨碍主流程的运行。</p><h1 id="战前准备"><a href="#战前准备" class="headerlink" title="战前准备"></a>战前准备</h1><p>省略翻代码的过程，简单的结论就是：进程卡死的问题由 egg-bin 内置的 ets（egg-ts-helper）指令诱发，其使用 <code>child_process.execSync</code> 方法启动子进程来预加载一部分代码用作检查，而子进程卡住不退出，才导致父进程无法继续向下执行。</p><blockquote><p>ets 执行 execSync 的位置：<a href="https://github.com/whxaxes/egg-ts-helper/blob/master/src/utils.ts#L107" target="_blank" rel="noopener">https://github.com/whxaxes/egg-ts-helper/blob/master/src/utils.ts#L107</a> 其中 cmd 的内容是执行 <code>./scripts/eggInfo</code> 文件。eggInfo 指令了 egg 的 loader 来获取插件信息，因此 apm 作为生命周期之前的模块被顺便加载了。</p></blockquote><p>经过检查和断点调试，已经找出进程无法正常退出的根源在 <code>elasitc-apm-http-client</code> 模块和 <code>apm-server</code> 的通讯之间。并且如果把 apm-server 的目标地址改成本机未使用的端口，如 <code>http://localhost:8201</code>，进程可迅速地正常退出。但如果填写一个错误地或不存在的地址，例如 <code>http://10.10.10.10:8200</code> ，以致访问超时，进程就会挂起。</p><h1 id="开始狩猎"><a href="#开始狩猎" class="headerlink" title="开始狩猎"></a>开始狩猎</h1><p>我们已经缩小了问题重现的范围，就可以仔细阅读代码了。</p><p>首先看向 http client 创建的步骤，唯一值得注意的点是一个轮询操作。apm 创建时默认开启了 elastic-apm-http-client 的 <code>centralConfig</code> 选项，此功能是允许在 Kibana 看板上直接修改 apm agent 的配置而无须重启 Node.js 进程，实现原理便是轮询 apm-server 以查询最新的配置信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Client.prototype._pollConfig = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> req = <span class="keyword">this</span>._transport.get(opts, res =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  req.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>._scheduleNextConfigPoll()</span><br><span class="line">    <span class="keyword">this</span>.emit(<span class="string">'request-error'</span>, err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Client.prototype._scheduleNextConfigPoll = <span class="function"><span class="keyword">function</span> (<span class="params">seconds</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>._configTimer !== <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  seconds = seconds || <span class="number">300</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._configTimer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>._configTimer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>._pollConfig()</span><br><span class="line">  &#125;, seconds * <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._configTimer.unref()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然轮询可怕，但上面已经为 Timeout 调用了 unref 方法。正常来说，只要没有其他 event loop 在运行，<code>Timer.unref()</code> 能够让 Node.js 进程在 Timeout 回调调用前退出，可以防止程序空转。</p><p>因此问题不在这段代码，为了验证推断，关闭此选项之后，果然依旧不能正常退出。</p><p>既然进程还在运转，就一定有其他的 event loop。在 elastic-apm-http-client 中继续寻找到了另一个 Timeout，该函数每次触发数据上报时都会被调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Client.prototype._maybeCork = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>._writableState.corked &amp;&amp; <span class="keyword">this</span>._conf.bufferWindowTime !== <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cork()</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._corkTimer &amp;&amp; <span class="keyword">this</span>._corkTimer.refresh) &#123;</span><br><span class="line">      <span class="comment">// the refresh function was added in Node 10.2.0</span></span><br><span class="line">      <span class="keyword">this</span>._corkTimer.refresh()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>._corkTimer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.uncork()</span><br><span class="line">      &#125;, <span class="keyword">this</span>._conf.bufferWindowTime)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>._writableState.length &gt;= <span class="keyword">this</span>._conf.bufferWindowSize) &#123;</span><br><span class="line">    <span class="keyword">this</span>._maybeUncork()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Timer.refresh()</code> 可以重置已执行的定时任务，这里很有可能是真正的问题点。</p><p>暂停代码阅读，先盲目猜测一波：在第一次请求超时之前，进程一定不会退出，但超时之后，将在 30 秒后才会重新发起新的请求，进程退出的机会就在这 30 秒。而 _maybeCork 这里虽然每次数据上报都会触发不经过 unref 处理的 setTimeout，奈何我查了 bufferWindowTime 默认才 20 毫秒。所以问题出在这里的可能性又很渺茫了，试下把这段注释掉，果然……<br>但凭着对 elastic-apm-node 项目的熟悉，性能指标的上报间隔恰好也是 30 秒，这里一定有个定时任务的，但之前直接在项目中搜索关键字未找到，就忽略了。</p><p>根据相关时间字段，又检索到了定时任务的创建地点 —— <code>measured-reporting</code> 模块，然而这里也做了 unref 处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">_createIntervalCallback(intervalInSeconds) &#123;</span><br><span class="line">  <span class="keyword">this</span>._log.debug(<span class="string">`_createIntervalCallback() called with intervalInSeconds: <span class="subst">$&#123;intervalInSeconds&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>._reportMetricsWithInterval(intervalInSeconds);</span><br><span class="line">  &#125;, intervalInSeconds * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>._unrefTimers) &#123;</span><br><span class="line">    timer.unref();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._intervals.push(timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="狩猎失败-超时"><a href="#狩猎失败-超时" class="headerlink" title="狩猎失败/超时"></a>狩猎失败/超时</h1><p>在 node_modules 中全局搜索了 setTimeout 以及 setInterval，排除了所有可疑迹象，剩下的连接就难排查了，迫于“生产力”，问题暂时追踪到这里。。。</p><h1 id="亡羊补牢"><a href="#亡羊补牢" class="headerlink" title="亡羊补牢"></a>亡羊补牢</h1><p>思考了对应的解决方案：</p><ol><li>将 ets 改成异步执行，但可能失去了前置检查的意义</li><li>分析并重写 elastic-apm-node 的连接机制</li><li>在 ets 执行时不启动 apm</li><li>做好连通性检测，确保 apm 的配置可靠再 apm.start()，但网络请求是异步的，会让 apm 之后整个项目的模块加载都在异步回调中处理</li></ol><p>1、2 的成本太高，而 4 没有做过可靠的测试，不保证不会对模块加载和优化产生副作用，所以最可行的方案是 3。</p><p>找准方向就开搞，通过 process.env 入手，关注几个比较有用的环境变量：</p><ol><li>process.env.NODE_ENV</li><li>process.env.ETS_REGISTER_PID，此变量存在时，证明有 ets 参与，不启动。但特别地，单独运行 <code>ets</code> 时没有此变量，也没有 NODE_ENV，应对方法是将 NODE_ENV 为 undefined 的环境也排除。</li><li>process.env.npm_lifecycle_event，是 npm 添加的当前执行的 npm script 名称标识。可以考虑为 start，restart 时才启动。</li></ol><p>补充方案：<br>通过 process.env 向 apm 传递自定义参数，便于控制配置项。</p><p>最后 apm 启动头部长这个样子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义 APM_ENABLE 作为开关条件</span></span><br><span class="line"><span class="keyword">const</span> enableAPM = process.env.APM_ENABLE || (process.env.NODE_ENV &amp;&amp; !process.env.ETS_REGISTER_PID);</span><br><span class="line"><span class="keyword">if</span> (enableAPM) &#123;</span><br><span class="line">  <span class="comment">// 除了 NODE_ENV，也可以使用自定义的 ENV</span></span><br><span class="line">  <span class="keyword">const</span> options = getOptionsByENV(process.env.NODE_ENV)</span><br><span class="line">  apm.start(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然没结论，但进程挂起的根本原因是没错的。找 BUG 最耗时的是方向歪了，试过用干净的 Node.js 代码模拟，没能复现问题。而 wtfnode 和其他跟踪模块，因为 callsite 覆盖问题，也没能提供清晰的调用栈，或许应该考虑从修复 callsite 这个方向入手？</p><p>To be continue? </p><p>但是意义不大了，从这堆充满 hack 的代码中并没有学到特别有价值的东西，而且时间成本太高。倒是警醒自己在 Timer 和 socket 的底层使用上，务必留意 unref 的处理。还是把时间留给更重要的事吧，衰！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;先把干货放前面，辅助排查的 npm 模块有：&lt;a href=&quot;https://github.com/myndzi/wtfnode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wtfnode&lt;/a&gt;，why-is-node-running，active-handles 等，使用方法差不多如下，可以查看各自的文档。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; wtf = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;wtfnode&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// your codes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// track down&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wtf.dump();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;也可以更深入地排查，因为上述模块的核心都是 Node.js 文档未标注的两个接口：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;process._getActiveHandles();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;process._getActiveRequests();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;好了，本篇到这里结束了，剩下的内容，劝你还是跳过吧：流水帐警告⚠️️ 翻车警告⚠️️&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>警惕 Travis CI 的 npm 缓存</title>
    <link href="http://claude-ray.com/2019/08/01/travis-npm-cache/"/>
    <id>http://claude-ray.com/2019/08/01/travis-npm-cache/</id>
    <published>2019-08-01T13:56:25.000Z</published>
    <updated>2019-09-12T10:45:26.128Z</updated>
    
    <content type="html"><![CDATA[<p>从 2019 年 7 月份开始，Travis CI 默认开启 npm 缓存。这意味着 node_module 和 package-lock.json 会在初次构建时缓存，倘若后续更新 npm 依赖而不刷新该缓存，可能带来构建失败的问题。</p><a id="more"></a><p>下面是发现问题的源头。</p><p>在为一个项目添加了新的依赖 rimraf 之后，Travis CI 意外地报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh: 1: rimraf: not found</span><br></pre></td></tr></table></figure><p>此时 <code>.travis.yml</code> 配置为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'8'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'10'</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">npminstall</span> <span class="string">-g</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npminstall</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npminstall</span> <span class="string">codecov</span> <span class="string">&amp;&amp;</span> <span class="string">codecov</span></span><br></pre></td></tr></table></figure><p>很明显新增的 npm 依赖没有安装上，但本地测试没有问题，于是替换 npminstall 为原生的 npm install，降低问题排查范围。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'8'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'10'</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">codecov</span> <span class="string">&amp;&amp;</span> <span class="string">codecov</span></span><br></pre></td></tr></table></figure><p>然而移除 npminstall 之后，报错变为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Unhandled rejection RangeError: Maximum call stack size exceeded</span><br><span class="line">    at RegExp.test (&lt;anonymous&gt;)</span><br><span class="line">    at &#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;node_modules&#x2F;aproba&#x2F;index.js:38:16</span><br><span class="line">    at Array.forEach (&lt;anonymous&gt;)</span><br><span class="line">    at module.exports (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;node_modules&#x2F;aproba&#x2F;index.js:33:11)</span><br><span class="line">    at flatNameFromTree (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;install&#x2F;flatten-tree.js:37:3)</span><br><span class="line">    at flatNameFromTree (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;install&#x2F;flatten-tree.js:39:14)</span><br><span class="line">    at flatNameFromTree (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;install&#x2F;flatten-tree.js:39:14)</span><br><span class="line">    at flatNameFromTree (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;install&#x2F;flatten-tree.js:39:14)</span><br><span class="line">    at flatNameFromTree (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;install&#x2F;flatten-tree.js:39:14)</span><br><span class="line">    at flatNameFromTree (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;install&#x2F;flatten-tree.js:39:14)</span><br><span class="line">    at flatNameFromTree (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;install&#x2F;flatten-tree.js:39:14)</span><br><span class="line">    at flatNameFromTree (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;install&#x2F;flatten-tree.js:39:14)</span><br><span class="line">    at flatNameFromTree (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;install&#x2F;flatten-tree.js:39:14)</span><br><span class="line">    at flatNameFromTree (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;install&#x2F;flatten-tree.js:39:14)</span><br><span class="line">    at flatNameFromTree (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;install&#x2F;flatten-tree.js:39:14)</span><br><span class="line">    at flatNameFromTree (&#x2F;home&#x2F;travis&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.16.0&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;lib&#x2F;install&#x2F;flatten-tree.js:39:14)</span><br></pre></td></tr></table></figure><p>之后，去掉 rimraf 依赖于事无济，重跑其他 node 项目的 ci 却一切正常，因此最终确定是 travis 运行环境带来的问题。</p><p>果然，寻找刷新方法的过程中发现了右侧 <code>More options</code> 中的 <code>Caches</code> 选项，点击里面的删除键后，CI 重新运行成功。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://docs.travis-ci.com/user/caching/#npm-cache" target="_blank" rel="noopener">https://docs.travis-ci.com/user/caching/#npm-cache</a></p><blockquote><p>Please note that as of July 2019, npm is cached by default on Travis CI</p></blockquote><p>To disable npm caching, use:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">npm:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从 2019 年 7 月份开始，Travis CI 默认开启 npm 缓存。这意味着 node_module 和 package-lock.json 会在初次构建时缓存，倘若后续更新 npm 依赖而不刷新该缓存，可能带来构建失败的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CI" scheme="http://claude-ray.com/categories/CI/"/>
    
    
      <category term="Travis" scheme="http://claude-ray.com/tags/Travis/"/>
    
      <category term="CI" scheme="http://claude-ray.com/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>fcitx-remote-for-osx 设置 Squirrel 输入法切换</title>
    <link href="http://claude-ray.com/2019/07/17/fcitx-remote-for-osx-squirrel/"/>
    <id>http://claude-ray.com/2019/07/17/fcitx-remote-for-osx-squirrel/</id>
    <published>2019-07-17T12:55:30.000Z</published>
    <updated>2020-01-10T03:29:07.504Z</updated>
    
    <content type="html"><![CDATA[<p>初衷是解决中文输入法在 vim/evil 键位下的 <code>insert</code> 模式和 <code>normal</code> 模式的切换问题，实现 <code>normal</code> 模式自动切英文、<code>insert</code> 模式回复之前的输入状态。</p><p>当然各编辑器都有各自知名的解决方案，本次主要吐槽 Mac 平台 fcitx-remote-for-osx 和 squirrel 输入法间的“摩擦”。</p><a id="more"></a><p>在读本篇之前，默认你已经按照 fcitx-remote-for-osx <a href="https://github.com/xcodebuild/fcitx-remote-for-osx" target="_blank" rel="noopener">文档</a>进行了相关操作，并最终遇到了切换失败的问题，否则下文将对你没有帮助。</p><p>本来文档中指定的安装方法很简单</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install fcitx-remote-for-osx --with-input-method=&lt;method&gt;</span><br></pre></td></tr></table></figure><p>可是目前 homebrew 的 formula 移除了 options，无法指定 <code>--with-input-method</code>，上面指令的直接结果将是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: invalid option: --with-input-method&#x3D;squirrel-rime</span><br></pre></td></tr></table></figure><p>最初参考这个 <a href="https://github.com/xcodebuild/fcitx-remote-for-osx/issues/38#issuecomment-468114160" target="_blank" rel="noopener">issue</a>，通过 brew cap 安装 fcitx-remote-for-osx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap codefalling/fcitx-remote-for-osx</span><br><span class="line">brew install codefalling/fcitx-remote-for-osx/fcitx-remote-for-osx --with-squirrel-rime</span><br></pre></td></tr></table></figure><p>但是安装版本太老，引发了新的问题，无论是在 terminal，还是在 vim、emacs、vscode 中，只能切换到英文，无法切回 squirrel。</p><blockquote><p>可以执行 <code>fcitx-remote -t</code> 来测试能否反复切换中英文输入法。</p></blockquote><p>这时候通过 fcitx-remote-for-osx 的 <a href="https://github.com/xcodebuild/fcitx-remote-for-osx/blob/master/build.py" target="_blank" rel="noopener">build</a> 文件，发现 squirrel 有两种 bundle identitier</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InputMethod = &#123;</span><br><span class="line">    <span class="string">'squirrel-rime'</span>: <span class="string">'com.googlecode.rimeime.inputmethod.Squirrel.Rime'</span>,</span><br><span class="line">    <span class="string">'squirrel-rime-upstream'</span>: <span class="string">'im.rime.inputmethod.Squirrel.Rime'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看已安装rime的 Identifier</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osascript -e <span class="string">'id of app "squirrel"'</span></span><br></pre></td></tr></table></figure><p>结果可能是 <code>im.rime.*</code> 或 <code>com.googlecode.rimeime.*</code>。我这里的输出为 <code>im.rime.inputmethod.Squirrel</code>，说明要使用 <code>squirrel-rime-upstream</code> 作为编译选项。</p><p>可惜 tap 安装的旧版没有这个选项，最后决定直接用源码编译，等新版本修复了再回归 homebrew 管理。<code>build.py</code> 文件内容本来就简单，并且作者在 <a href="https://github.com/xcodebuild/fcitx-remote-for-osx/tree/feature/special-input-method#install" target="_blank" rel="noopener">special-input-method分支</a> 提供了编译安装的文档，效果和 homebrew install 是一致的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/dangxuandev/fcitx-remote-for-osx</span><br><span class="line"><span class="built_in">cd</span> fcitx-remote-for-osx</span><br><span class="line">./build.py build squirrel-rime-upstream</span><br><span class="line">cp ./fcitx-remote-squirrel-rime-upstream /usr/<span class="built_in">local</span>/bin/fcitx-remote-squirrel-rime</span><br><span class="line">ln -snf /usr/<span class="built_in">local</span>/bin/fcitx-remote-squirrel-rime /usr/<span class="built_in">local</span>/bin/fcitx-remote</span><br></pre></td></tr></table></figure><p>基本可以正常使用了，也没有出现切换延迟较高的问题，但偶尔遇到 squirrel 卡住，无法切换中英，在 squirrel issues 可以看到了有许多相关 bug。但是并没有人给出终极的解决方案，佛振认为这是其他软件的问题，暂不予关注，等他参与修复可能遥遥无期。详见这个已关闭的 <a href="https://github.com/rime/squirrel/issues/292" target="_blank" rel="noopener">issue</a></p><p>在写这篇文章的过程中，就触发了一次卡死状态……但切换输入法、或切换窗口就可以恢复。而在 VSCode 配置 vim 插件的<a href="https://github.com/VSCodeVim/Vim#input-method" target="_blank" rel="noopener">自动切换</a>后 100% 重现。</p><p>毕竟中文输入场景很少，完美输入方案在个人看来是不存在的，也就不再多折腾它了，暂且容忍一段时间，等出现频率高了再找解决方案吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初衷是解决中文输入法在 vim/evil 键位下的 &lt;code&gt;insert&lt;/code&gt; 模式和 &lt;code&gt;normal&lt;/code&gt; 模式的切换问题，实现 &lt;code&gt;normal&lt;/code&gt; 模式自动切英文、&lt;code&gt;insert&lt;/code&gt; 模式回复之前的输入状态。&lt;/p&gt;
&lt;p&gt;当然各编辑器都有各自知名的解决方案，本次主要吐槽 Mac 平台 fcitx-remote-for-osx 和 squirrel 输入法间的“摩擦”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="http://claude-ray.com/categories/Mac/"/>
    
    
      <category term="squirrel" scheme="http://claude-ray.com/tags/squirrel/"/>
    
      <category term="Vim" scheme="http://claude-ray.com/tags/Vim/"/>
    
      <category term="emacs evil" scheme="http://claude-ray.com/tags/emacs-evil/"/>
    
      <category term="input method" scheme="http://claude-ray.com/tags/input-method/"/>
    
  </entry>
  
  <entry>
    <title>elastic-apm-node 扩展篇 —— Egg</title>
    <link href="http://claude-ray.com/2019/07/12/elastic-apm-node-egg/"/>
    <id>http://claude-ray.com/2019/07/12/elastic-apm-node-egg/</id>
    <published>2019-07-12T13:18:53.000Z</published>
    <updated>2019-10-17T11:29:27.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇是为 elastic-apm-node 编写拓展系列的第二篇，主要介绍 egg 框架的定制指南。</p><p>单独拿 egg 出来讲，是因为市面主流的 APM 工具几乎都没有为 egg 提供支持。一方面 egg 底层基于 koa ，并且 egg-router 也是 koa-router 的二次封装，两者相似以致插件可以平稳切换，agent 的补丁方式也基本是一致的。另一方面，agent 代码必须早于 egg 和 egg-router 的加载才能生效，egg-bin、egg-script 等生态决定了编写框架之上的插件很难做到零代码入侵。</p><p>APM agent 作为 npm package 不适合做这样的事，更好的方法是我们利用 egg 工具链的接口，在引入 agent 的代码层处理好 egg 的配置。</p><a id="more"></a><h1 id="在-egg-前-require"><a href="#在-egg-前-require" class="headerlink" title="在 egg 前 require"></a>在 egg 前 require</h1><p>我们先考虑如何将 APM agent 早于 egg 执行，解决 patch 此框架主要问题，然后再完成定制化操作。</p><p>好在 egg 是提供了相关方法的，最底层的 API 是 <code>startCluster</code> 方法，可以传入 <code>require</code> 参数指明你要率先执行模块。</p><h2 id="方案一：修改启动文件"><a href="#方案一：修改启动文件" class="headerlink" title="方案一：修改启动文件"></a>方案一：修改启动文件</h2><p>假设把 APM 的引入和配置放在了根目录 elastic-apm.js 中，新建一个类似下面这样的 app.js 作为 egg 的启动文件，用最原始的 <code>node app.js</code> 启动服务就好了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'egg'</span>).startCluster(&#123;</span><br><span class="line">  <span class="built_in">require</span>: [ <span class="built_in">require</span>.resolve(<span class="string">'./elastic-apm'</span>) ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>!!! 不推荐：必须放弃 egg-bin 和 egg-scripts 作为启动器，需要自己补上很多操作。</p></blockquote><h2 id="方案二：修改-package-json"><a href="#方案二：修改-package-json" class="headerlink" title="方案二：修改 package.json"></a>方案二：修改 package.json</h2><blockquote><p>要求 <code>egg-bin</code> 版本 &gt;= <a href="https://github.com/eggjs/egg-bin/blob/master/History.md#4100--2019-01-04" target="_blank" rel="noopener">4.10.0</a></p></blockquote><p>在 <code>package.json</code> 中添加 <code>egg.require</code> 配置，用法来自 <a href="https://github.com/eggjs/egg/issues/2844#issuecomment-409457550" target="_blank" rel="noopener">issue 讨论</a>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"egg"</span>: &#123;</span><br><span class="line">    <span class="attr">"require"</span>: [ <span class="string">"./elastic-apm.js"</span> ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"egg-scripts start"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是目前<del>最推荐</del>的做法，不影响 egg 工具链的正常使用。</p><h4 id="2019-10-17-更正"><a href="#2019-10-17-更正" class="headerlink" title="2019-10-17 更正"></a>2019-10-17 更正</h4><blockquote><p>感谢 <a href="https://github.com/wpchou" target="_blank" rel="noopener">@wenpin</a> 提示</p></blockquote><p><code>egg.require</code> 配置只是 egg-bin 提供的接口，并在<a href="https://github.com/eggjs/egg-bin#options" target="_blank" rel="noopener">文档</a>上明确记录。然而 egg-scripts 目前还没有提供此入口，只能通过 <code>--require</code> 导入，egg-bin 也同样支持，这得益于 egg-cluster 的实现。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"egg-scripts start --require=@yourscope/elastic-apm"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>--require</code> 不能使用相对路径，比起使用绝对路径，通过 npm 包来引入更方便一些。(egg-scripts 的 issues 关闭了，不然问问阻断他们支持 egg.require 的原因…)</p><h1 id="编写补丁"><a href="#编写补丁" class="headerlink" title="编写补丁"></a>编写补丁</h1><h2 id="instrumentation-egg-js"><a href="#instrumentation-egg-js" class="headerlink" title="instrumentation/egg.js"></a>instrumentation/egg.js</h2><p>仿照 <a href="https://github.com/elastic/apm-agent-nodejs/blob/master/lib/instrumentation/modules/koa.js" target="_blank" rel="noopener">instrumentation/koa.js</a>，修改框架 name，注意开启 overwrite 选项，为了覆盖引用 koa 带来的标识。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">egg, agent, &#123; version, enabled &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!enabled) <span class="keyword">return</span> egg</span><br><span class="line">  <span class="comment">// 注意开启 overwrite，这样才能覆盖 koa 标识</span></span><br><span class="line">  agent.setFramework(&#123; <span class="attr">name</span>: <span class="string">'egg'</span>, version, <span class="attr">overwrite</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> egg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="instrumentation-egg-router-js"><a href="#instrumentation-egg-router-js" class="headerlink" title="instrumentation/egg-router.js"></a>instrumentation/egg-router.js</h2><p>唯一需要修改的就是去掉 <a href="https://github.com/elastic/apm-agent-nodejs/blob/master/lib/instrumentation/modules/koa-router.js" target="_blank" rel="noopener">instrumentation/koa-router.js</a> 的版本验证。考虑到 egg 引入的 koa 版本都是同时期最新，无须担心 egg 自身版本问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shimmer = <span class="built_in">require</span>(<span class="string">'elastic-apm-node/lib/instrumentation/shimmer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">Router, agent, &#123; version, enabled &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!enabled) <span class="keyword">return</span> Router</span><br><span class="line"></span><br><span class="line">  agent.logger.debug(<span class="string">'shimming koa-router prototype.match function'</span>)</span><br><span class="line">  shimmer.wrap(Router.prototype, <span class="string">'match'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">orig</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">_, method</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> matched = orig.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> method !== <span class="string">'string'</span>) &#123;</span><br><span class="line">        agent.logger.debug(<span class="string">'unexpected method type in koa-router prototype.match: %s'</span>, <span class="keyword">typeof</span> method)</span><br><span class="line">        <span class="keyword">return</span> matched</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(matched &amp;&amp; matched.pathAndMethod)) &#123;</span><br><span class="line">        <span class="keyword">const</span> layer = matched.pathAndMethod.find(<span class="function"><span class="keyword">function</span> (<span class="params">layer</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> layer &amp;&amp; layer.opts &amp;&amp; layer.opts.end === <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> path = layer &amp;&amp; layer.path</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> path === <span class="string">'string'</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> name = method + <span class="string">' '</span> + path</span><br><span class="line">          agent._instrumentation.setDefaultTransactionName(name)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          agent.logger.debug(<span class="string">'unexpected path type in koa-router prototype.match: %s'</span>, <span class="keyword">typeof</span> path)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        agent.logger.debug(<span class="string">'unexpected match result in koa-router prototype.match: %s'</span>, <span class="keyword">typeof</span> matched)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> matched</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Router</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="添加补丁"><a href="#添加补丁" class="headerlink" title="添加补丁"></a>添加补丁</h1><p>回到最初的 elastic-apm.js 文件，在其中设置 addPatch，大功告成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> apm = <span class="built_in">require</span>(<span class="string">'elastic-apm-node'</span>).start(&#123;</span><br><span class="line">  <span class="comment">// options</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">apm.addPatch(<span class="string">'egg'</span>, <span class="built_in">require</span>.resolve(<span class="string">'./instrumentation/egg'</span>))</span><br><span class="line">apm.addPatch(<span class="string">'@eggjs/router'</span>, <span class="built_in">require</span>.resolve(<span class="string">'./instrumentation/egg-router'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本篇是为 elastic-apm-node 编写拓展系列的第二篇，主要介绍 egg 框架的定制指南。&lt;/p&gt;
&lt;p&gt;单独拿 egg 出来讲，是因为市面主流的 APM 工具几乎都没有为 egg 提供支持。一方面 egg 底层基于 koa ，并且 egg-router 也是 koa-router 的二次封装，两者相似以致插件可以平稳切换，agent 的补丁方式也基本是一致的。另一方面，agent 代码必须早于 egg 和 egg-router 的加载才能生效，egg-bin、egg-script 等生态决定了编写框架之上的插件很难做到零代码入侵。&lt;/p&gt;
&lt;p&gt;APM agent 作为 npm package 不适合做这样的事，更好的方法是我们利用 egg 工具链的接口，在引入 agent 的代码层处理好 egg 的配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/tags/Node-js/"/>
    
      <category term="APM" scheme="http://claude-ray.com/tags/APM/"/>
    
      <category term="Elastic-APM" scheme="http://claude-ray.com/tags/Elastic-APM/"/>
    
      <category term="Egg" scheme="http://claude-ray.com/tags/Egg/"/>
    
  </entry>
  
  <entry>
    <title>elastic-apm-node 扩展篇 —— Express</title>
    <link href="http://claude-ray.com/2019/07/11/elastic-apm-node-express/"/>
    <id>http://claude-ray.com/2019/07/11/elastic-apm-node-express/</id>
    <published>2019-07-11T14:54:59.000Z</published>
    <updated>2019-09-12T10:45:26.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>elastic-apm-node 提供了非常友好的定制化支持，本篇将示范如何为 express 框架添加路由 patch，以满足信息上报的优化。</p><a id="more"></a><p>许多开发者在定制开源依赖时，都选择了 fork 源码，在此基础上提交修改，作为新的模块来“维护”。这样做的稳定性极高，等于对依赖加上了版本锁，不用担心动态版本的安全问题。</p><p>但弊端也非常大，最重要的是需要投入精力定时跟进官方包的更新。除了要小心 <code>breaking change</code>，任何你需要的 <code>fix</code> 或 <code>feature</code>，都要重新更新发布自己的模块。维护成本极高，甚至大部分情况是没人维护的。</p><p>幸亏 elastic-apm-node 有不错的扩展性，我们不用 fork，只需要做一个包裹层二次封装。</p><p>定制的出发点要立在合理的需求上，我们拿 vue-ssr 官网的 demo 举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createApp = <span class="built_in">require</span>(<span class="string">'/path/to/built-server-bundle.js'</span>)</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> context = &#123; <span class="attr">url</span>: req.url &#125;</span><br><span class="line"></span><br><span class="line">  createApp(context).then(<span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    renderer.renderToString(app, (err, html) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err.code === <span class="number">404</span>) &#123;</span><br><span class="line">          res.status(<span class="number">404</span>).end(<span class="string">'Page not found'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.status(<span class="number">500</span>).end(<span class="string">'Internal Server Error'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.end(html)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>默认情况下，无论请求 url 是指向哪个页面路由，Kibana apm 界面看到的事务信息永远都是 <code>GET *</code>，显然无法满足我们观测请求量的需要。</p><h1 id="route"><a href="#route" class="headerlink" title="route *"></a>route <code>*</code></h1><p>路由是 * 动态匹配的，要想获取到真实路由，比较容易的方案是读取 <code>req.path</code>，但最好的方案是直接拿到原始表达式，这样 <code>/user/:id</code> 形式的路由也能较好地折叠呈现。</p><p>但 vue ssr 项目通常将页面路由规则存放在前端，这种情况也无法在 express 的 router 上做文章，只能回到原始的 url path 方案了。</p><p>在 <code>node_modules/elastic-apm-node/lib/instrumentation/modules/express.js</code> 的 <code>patchLayer</code> 中加入如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> add below this code block</span></span><br><span class="line"><span class="keyword">if</span> (!layer.route &amp;&amp; layerPath &amp;&amp; <span class="keyword">typeof</span> next === <span class="string">'function'</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> patch route * up</span></span><br><span class="line"><span class="keyword">if</span> (layer.route &amp;&amp; layerPath === <span class="string">'*'</span> &amp;&amp; layer.path) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = req.method + <span class="string">' '</span> + layer.path</span><br><span class="line">  agent._instrumentation.setDefaultTransactionName(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以对 path 内部加上正则校验，遇到纯数值、32 位或 16 位定长 id，便将其当作 <code>:id</code>，将内容掩盖处理，以达成简易的路由还原效果。</p><p>最后，由于这个已经修改了 express route 的 wrap，但 shimmer 的代码决定了一个函数只能有一个 wrapper。因此想替换掉原有的 wrapper，必须先 unwrap express 的 route，然后再执行 shimmer.wrap 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> rewarp express router</span></span><br><span class="line">shimmer.unwrap(routerProto, <span class="string">'route'</span>)</span><br><span class="line"></span><br><span class="line">shimmer.wrap(routerProto, <span class="string">'route'</span>, orig =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">route</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> route = orig.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">var</span> layer = <span class="keyword">this</span>.stack[<span class="keyword">this</span>.stack.length - <span class="number">1</span>]</span><br><span class="line">    patchLayer(layer, path)</span><br><span class="line">    <span class="keyword">return</span> route</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其他的 patch 同理。</p><h1 id="addPatch"><a href="#addPatch" class="headerlink" title="addPatch"></a>addPatch</h1><p>上面介绍了完成需求的方法，但本篇主旨是扩展，而非在源码上直接修改。这就要使用 apm agent 暴露的 <a href="https://www.elastic.co/guide/en/apm/agent/nodejs/master/agent-api.html#apm-add-patch" target="_blank" rel="noopener">addPatch</a> 接口。可在此基础上完成所有定制框架和路由的处理。</p><p>特别提示，有别于上面的 wrapper，针对同一个 npm 模块，elastic-apm-node 支持添加多个 patch。因此不必要的时候，无需删除 elastic agent 已经添加的 patch，直接在引入 apm 的地方调用 addPatch 即可。</p><p>还是以 express 为例，把 patch 的新方法写在另一个 <code>instrumentation/express.js</code> 文件中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apm = <span class="built_in">require</span>(<span class="string">'elastic-apm-node'</span>).start()</span><br><span class="line"></span><br><span class="line">apm.addPatch(<span class="string">'express'</span>, <span class="built_in">require</span>.resolve(<span class="string">'./instrumentation/express'</span>))</span><br></pre></td></tr></table></figure><p>./instrumentation/express.js 的实现可以参考原 agent v2.12.1 版本中的 <a href="https://github.com/elastic/apm-agent-nodejs/blob/master/lib/instrumentation/modules/express.js" target="_blank" rel="noopener">express</a>，需要修改的内容上文已经提到了，需要补充代码的位置参考如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Original file: https://github.com/elastic/apm-agent-nodejs/blob/master/lib/instrumentation/modules/express.js</span></span><br><span class="line"><span class="comment">// License: https://github.com/elastic/apm-agent-nodejs/blob/master/LICENSE</span></span><br><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isError = <span class="built_in">require</span>(<span class="string">'core-util-is'</span>).isError</span><br><span class="line"><span class="keyword">const</span> semver = <span class="built_in">require</span>(<span class="string">'semver'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具模块直接引用 agent，不必重复实现</span></span><br><span class="line"><span class="keyword">const</span> shimmer = <span class="built_in">require</span>(<span class="string">'elastic-apm-node/lib/instrumentation/shimmer'</span>)</span><br><span class="line"><span class="keyword">const</span> symbols = <span class="built_in">require</span>(<span class="string">'elastic-apm-node/lib/symbols'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余未经标注的代码均来自原 agent 的 express 文件，只需要复制必要的部分</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">express, agent, &#123; version, enabled &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 框架识别、版本号校验、路由兼容性的一些处理，以及内部函数，从文件原样复制即可</span></span><br><span class="line">  <span class="comment">// 省略代码若干行……</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">patchLayer</span> (<span class="params">layer, layerPath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!layer[layerPatchedSymbol]) &#123;</span><br><span class="line">      layer[layerPatchedSymbol] = <span class="literal">true</span></span><br><span class="line">      agent.logger.debug(<span class="string">'shimming express.Router.Layer.handle function:'</span>, layer.name)</span><br><span class="line">      shimmer.wrap(layer, <span class="string">'handle'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">orig</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> handle</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (orig.length !== <span class="number">4</span>) &#123;</span><br><span class="line">          handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!layer.route &amp;&amp; layerPath &amp;&amp; <span class="keyword">typeof</span> next === <span class="string">'function'</span>) &#123;</span><br><span class="line">              safePush(req, symbols.expressMountStack, layerPath)</span><br><span class="line">              <span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!(req.route &amp;&amp; <span class="built_in">arguments</span>[<span class="number">0</span>] <span class="keyword">instanceof</span> <span class="built_in">Error</span>)) &#123;</span><br><span class="line">                  req[symbols.expressMountStack].pop()</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> next.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// <span class="doctag">NOTE:</span> 在这里添加 `*` 等路由定制代码</span></span><br><span class="line">            <span class="keyword">if</span> (layer.route &amp;&amp; layerPath === <span class="string">'*'</span> &amp;&amp; layer.path) &#123;</span><br><span class="line">              <span class="keyword">const</span> name = req.method + <span class="string">' '</span> + layer.path</span><br><span class="line">              agent._instrumentation.setDefaultTransactionName(name)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> orig.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 省略若干行……</span></span><br><span class="line">        <span class="keyword">return</span> handle</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 省略若干行……</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> 记得加一行 unwrap</span></span><br><span class="line">  shimmer.unwrap(routerProto, <span class="string">'route'</span>)</span><br><span class="line">  <span class="comment">// 并重新 wrap，代码复制过来即可</span></span><br><span class="line">  shimmer.wrap(routerProto, <span class="string">'route'</span>, orig =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">route</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> route = orig.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">      <span class="keyword">var</span> layer = <span class="keyword">this</span>.stack[<span class="keyword">this</span>.stack.length - <span class="number">1</span>]</span><br><span class="line">      patchLayer(layer, path)</span><br><span class="line">      <span class="keyword">return</span> route</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 剩余代码处理基本到此位置了，不需要处理的 wrapper 保持不动就好</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> express</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="unknown-route"><a href="#unknown-route" class="headerlink" title="unknown route"></a>unknown route</h1><p>在使用中发现，通过 app.use 引入的路由全部被标记为 <code>unknown route</code>，正准备在 patch 中修复这个问题的时候，在这个 <a href="https://github.com/elastic/apm-agent-nodejs/issues/1008" target="_blank" rel="noopener">issue</a> 中找到了根源。</p><p>此问题在 <code>v2.11.5</code> 版本后修复，升级版本就行，不用折腾了~</p><h1 id="Afterword"><a href="#Afterword" class="headerlink" title="Afterword"></a>Afterword</h1><p>给 elastic-apm-node 编写拓展时明显体会到高扩展性的优势。在设计工具类时，良好的扩展性给用户带来了非常多的便利，遇到这类第三方依赖的 bug 时，作为用户的我们可以在 <strong>不修改原始代码的情况下自行将其修复</strong>。</p><p>特别是近期接触了较多 GNU 精神，向所有在项目中为扩展性挥洒汗水的开发者致敬。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;elastic-apm-node 提供了非常友好的定制化支持，本篇将示范如何为 express 框架添加路由 patch，以满足信息上报的优化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/tags/Node-js/"/>
    
      <category term="Express" scheme="http://claude-ray.com/tags/Express/"/>
    
      <category term="APM" scheme="http://claude-ray.com/tags/APM/"/>
    
      <category term="Elastic-APM" scheme="http://claude-ray.com/tags/Elastic-APM/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT 主题升级</title>
    <link href="http://claude-ray.com/2019/06/28/hexo-theme-next-upgrade-7/"/>
    <id>http://claude-ray.com/2019/06/28/hexo-theme-next-upgrade-7/</id>
    <published>2019-06-28T14:58:34.000Z</published>
    <updated>2019-09-12T15:02:41.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>苦于 <code>hexo g</code> 的效率问题，与其重新折腾框架，决定在彻底忍受不了之前再实行一点儿补救措施——依赖升级。</p><p>Hexo 主题 NexT 5.1.x 已经很久不维护，传说新版本 7.1.x 的速度有显著提升，它是本次的重点升级对象。这里只记录 Next 主题的变更，因为 Hexo 主体和其他依赖的升级都十分平滑，没有明显的 breaking changes。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>参考 <a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md" target="_blank" rel="noopener">5.1.x升级指南</a>，问题不大，主要痛点在于忘了曾经做过哪些定制的改动，再次提醒自己 init 和 custom 提交区分开的重要性。</p><p>直接在博客根目录执行 git clone，把最新版主题放到 next7 下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next7</span><br></pre></td></tr></table></figure><p>为了清理 NexT 仓库原有的 git 信息，继续执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next7 &amp;&amp; rm -rf .git &amp;&amp; git rm --cache . -f</span><br></pre></td></tr></table></figure><h1 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h1><p>在站点 _config.yml 中替换主题为 next7，便成功替换到新主题。启动站点之前，先参考迁移文档把主题下定制过的样式复制过来（以及其他曾经定制过的文件）。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#theme: next</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next7</span></span><br></pre></td></tr></table></figure><h1 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h1><ol><li><p>favicon，记得把图片也拷贝到新主题目录</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon.ico</span> <span class="comment">#/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon.ico</span> <span class="comment">#/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/favicon.ico</span> <span class="comment">#/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/favicon.ico</span> <span class="comment">#/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure></li><li><p>footer，如果觉得主题信息冗余，可以 false 去掉</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2017</span> <span class="comment"># 站点起始日期</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">bolt</span> <span class="comment"># 替换footer中的图标</span></span><br><span class="line">  <span class="attr">powered:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>creative_commons，打开许可协议</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure></li><li><p>menu，和 next 5 略有不同，icon 的设置和目录放在一起了，按需开启</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br></pre></td></tr></table></figure></li><li><p>scheme 切换，和 next 5 一样的配置姿势</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br></pre></td></tr></table></figure></li><li><p>social，同 menu</p></li><li><p>links 友链，和之前相比也没什么变化</p></li><li><p>avatar，默认可以设置圆角和旋转了，好评</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>symbols_count_time。这个算是 next 性能优化的一大“改进”。按作者的描述，其性能比 <code>hexo-wordcount</code> 好，效果比 <code>hexo-reading-time</code> 强（主要强在支持字数统计？）。</p><p> 可惜性能上去了，准确度堪忧，3k 字的文章被统计成了 8k 字，看源码似乎是标点也统计进去了，修改了 awl (Average Word Length) 也没解决问题，这让我接受不能。同时还与 NexT 主题存在版本不兼容的<a href="https://github.com/theme-next/hexo-symbols-count-time/issues/31" target="_blank" rel="noopener">问题</a>。</p><p> 顺便瞅了眼 hexo-wordcount 的源码，并不存在 NexT 升级文档上描述的“存在外部依赖”问题，因为作者在此之后进行了整改，目前代码量也非常小。并且在亲自对比生成静态文件的速度后……打扰了，果然还是 hexo-wordcount 香。</p><p> 最终，套用了 NexT 内置的 symbols_count_time 模板，参考着 hexo-wordcount 的<a href="https://github.com/willin/hexo-wordcount/blob/master/README.md" target="_blank" rel="noopener">文档</a>把它重新装回来了！有兴趣更改的小伙伴，可以参考我的这次<a href="https://github.com/Claude-Ray/claude-ray.github.io/commit/c7caef597aff31f9eb5b1107672f539ca96c3d53" target="_blank" rel="noopener">提交</a>。</p></li></ol><ol start="9"><li>字数统计。这里笔者选择了关闭，原本 Leancloud 用着好好的，但最近发出公告，必须通过认证才能继续使用服务，懒得手持身份证去审核，于是考虑迁移到国际版。但经过一番尝试，国际版的 app id 无法直接用于替换。由于没有对博客做过宣传，这个阅读量对自己或别人的参考价值不大，因此放弃接入。:)</li></ol><h2 id="附-hexo-wordcount-的配置"><a href="#附-hexo-wordcount-的配置" class="headerlink" title="附 hexo-wordcount 的配置"></a>附 hexo-wordcount 的配置</h2><h3 id="themes-next7-config-yml"><a href="#themes-next7-config-yml" class="headerlink" title="themes/next7/_config.yml"></a>themes/next7/_config.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">totalcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="themes-next7-layout-macro-post-swig"><a href="#themes-next7-layout-macro-post-swig" class="headerlink" title="themes/next7/layout/_macro/post.swig"></a>themes/next7/layout/_macro/post.swig</h3><p>busuanzi_count 模板下添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;# Custom word count with hexo-wordcount #&#125;</span><br><span class="line">&#123;% if theme.post_wordcount.wordcount or theme.post_wordcount.min2read %&#125;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;post-wordcount&quot;&gt;</span><br><span class="line">    &#123;% if theme.post_wordcount.wordcount %&#125;</span><br><span class="line">      &#123;% if not theme.post_wordcount.separated_meta %&#125;</span><br><span class="line">        &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;fa fa-file-word-o&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">      &#123;% if theme.post_wordcount.item_text %&#125;</span><br><span class="line">        &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#39;symbols_count_time.count&#39;) + __(&#39;symbol.colon&#39;) &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">      &lt;span title&#x3D;&quot;&#123;&#123; __(&#39;symbols_count_time.count&#39;) &#125;&#125;:&quot;&gt;</span><br><span class="line">        &#123;&#123; wordcount(post.content) &#125;&#125;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if theme.post_wordcount.wordcount and theme.post_wordcount.min2read %&#125;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if theme.post_wordcount.min2read %&#125;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;fa fa-clock-o&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">      &#123;% if theme.post_wordcount.item_text %&#125;</span><br><span class="line">        &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#39;symbols_count_time.time&#39;) &#125;&#125; &amp;asymp;&lt;&#x2F;span&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">      &lt;span title&#x3D;&quot;&#123;&#123; __(&#39;symbols_count_time.time&#39;) &#125;&#125;&quot;&gt;</span><br><span class="line">        &#123;&#123; min2read(post.content) &#125;&#125; mins.</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;# Custom word count with hexo-wordcount #&#125;</span><br></pre></td></tr></table></figure><h3 id="themes-next7-layout-partials-footer-swig"><a href="#themes-next7-layout-partials-footer-swig" class="headerlink" title="themes/next7/layout/_partials/footer.swig"></a>themes/next7/layout/_partials/footer.swig</h3><p>symbols_count_time 下面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;# Custom word count with hexo-wordcount #&#125;</span><br><span class="line">&#123;% if theme.post_wordcount.totalcount %&#125;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;fa fa-area-chart&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#39;symbols_count_time.count_total&#39;) + __(&#39;symbol.colon&#39;) &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;span title&#x3D;&quot;&#123;&#123; __(&#39;symbols_count_time.count_total&#39;) &#125;&#125;&quot;&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; totalcount(site) &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;# Custom word count with hexo-wordcount #&#125;</span><br></pre></td></tr></table></figure><h3 id="themes-next7-source-css-common-components-post-post-meta-styl"><a href="#themes-next7-source-css-common-components-post-post-meta-styl" class="headerlink" title="themes/next7/source/css/_common/components/post/post-meta.styl"></a>themes/next7/source/css/_common/components/post/post-meta.styl</h3><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Custom word count with hexo-wordcount</span></span><br><span class="line"><span class="selector-class">.post-wordcount</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> !hexo-config(<span class="string">'post_wordcount.separated_meta'</span>) &#123; <span class="attribute">display</span>: inline-block; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>升级过程比预想中的还要折腾，并且没有达到性能优化的目的，5.1.x 的稳定用户没有必要升级。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;苦于 &lt;code&gt;hexo g&lt;/code&gt; 的效率问题，与其重新折腾框架，决定在彻底忍受不了之前再实行一点儿补救措施——依赖升级。&lt;/p&gt;
&lt;p&gt;Hexo 主题 NexT 5.1.x 已经很久不维护，传说新版本 7.1.x 的速度有显著提升，它是本次的重点升级对象。这里只记录 Next 主题的变更，因为 Hexo 主体和其他依赖的升级都十分平滑，没有明显的 breaking changes。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://claude-ray.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://claude-ray.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Node.js APM 产品调研：Elastic APM</title>
    <link href="http://claude-ray.com/2019/05/27/elastic-apm-node-research/"/>
    <id>http://claude-ray.com/2019/05/27/elastic-apm-node-research/</id>
    <published>2019-05-27T14:46:05.000Z</published>
    <updated>2020-02-14T01:18:29.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>根据上一篇《<a href="http://claude-ray.com/2019/05/19/node-apm-product-research/">Node.js APM 产品调研</a>》的市场调研结果，笔者更青睐 Elastic APM 这个开源产品，故决定带来它的一篇专题介绍。</p><p>尽管团队已经开始试用，但踩坑时间较短，与其编写测评，不如先带大家走进这个项目，剖析个别令人感兴趣的技术点。</p><a id="more"></a><h1 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h1><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>从 github 的信息来看，项目从 2011 年 11 月开工，已经不算新项目，期间基本就是单人维护的状态，进展到现在颇为不易。</p><p>两任作者分别是 Sentry 的核心成员 Matt Robenolt，以及 Elastic 团队的 Node.js 专职开发 Thomas Watson，同时他也是 Node.js 团队的核心贡献者之一。</p><p>对 Elastic APM 完全没有接触过的读者，可以先阅读 nswbmw/node-in-debugging 中的<a href="https://github.com/nswbmw/node-in-debugging/blob/master/5.2%20Elastic%20APM.md" target="_blank" rel="noopener">介绍</a>。</p><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p>官方文档是相当细致了，使用前推荐阅读。除了基本功能，这里列举一些值得关注的点</p><ul><li>支持自定义 Node 框架和路由。Agent 记录路由的原理都是 patch 各路由中间件的 match 方法，倘若 SDK 没有对你在用的路由库提供支持，可以选择手动记录或自行 patch。</li><li>支持主动上报错误 stack，并且帮你在看板上定位异常的来源代码。</li><li>支持采集 http 请求的 body 参数，默认关闭。一旦开启，可以构成非常强大的日志分析。但不建议在 apm agent 做这种处理，会给监控赋予了太多职能，有需要最好结合全链路 tracing 方案使用额外的 logger agent。</li><li>过滤敏感信息，根据请求头、或自定义维度。</li><li>支持定制 Transaction, Span， 额外的 custom 数据。</li><li>性能优化指南，结合自身业务需要，调整采样率、上报频率、请求体的限制。</li><li>支持 opentracing</li><li>支持 kubernetes</li></ul><h2 id="数据上报"><a href="#数据上报" class="headerlink" title="数据上报"></a>数据上报</h2><p>首先我们简称 Elastic APM client 为 agent。agent 到日志采集服务 apm-server 的通讯方式为 http 或 https。请求方法被封装到了 <code>elastic-http-client</code> 模块，负责将 Transaction, Error, Metric, Span 这类指标发送到 apm-server，并且还包含格式检查、过长的信息截断的功能。</p><p>apm-server 负责将采集到的数据存储到 Elasticsearch。</p><p>最终在 Kibana 可视化地分析 Elasticsearch 中存储的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elastic-apm-node(node)  ➡   apm-server(golang)</span><br><span class="line">                                   ⬇</span><br><span class="line">     kibana(展示层)      ➡   elasticsearch(数据层)</span><br></pre></td></tr></table></figure><blockquote><p>数据全部由自己的 Elasticsearch 掌控，在此基础上能定制出更多分析工具。</p></blockquote><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>相比商业 APM 项目，elastic-apm-node 结构非常简洁。</p><p>基本的目录信息如下</p><ul><li>lib<ul><li>filters</li><li>instrumentation<ul><li>module</li></ul></li><li>metrics<ul><li>platform</li></ul></li><li>middleware</li></ul></li></ul><p>除了 filters 和 middleware 服务于内部功能，分别用于过滤敏感请求头(auth、cookie) 和异常捕获，剩下的就是核心功能  <code>Transaction</code>、<code>Error</code>、<code>Metric</code> 所在目录了。</p><p>接下来，我将围绕这三大功能进行介绍。</p><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p>通常错误日志包含了哪一行代码报错，但只有翻看代码才能确认究竟哪段代码出现问题。APM 提供了可以在看板界面直接确认异常代码的解决方案。</p><p>核心代码如下，目的是为了在 Error 对象中通过 __error_callsites 属性获取到 callsites 信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formatter = <span class="built_in">require</span>(<span class="string">'./lib/node-0.10-formatter'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orig = <span class="built_in">Error</span>.prepareStackTrace</span><br><span class="line"><span class="built_in">Error</span>.prepareStackTrace = <span class="function"><span class="keyword">function</span> (<span class="params">err, callsites</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(err, <span class="string">'__error_callsites'</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    value: callsites</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (orig || formatter)(err, callsites)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  err.stack</span><br><span class="line">  <span class="keyword">return</span> err.__error_callsites</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中只有一个不常见的方法 <code>Error.prepareStackTrace</code>，并且在 Node.js 的 API 中找不到，因为它实际是 V8 暴露的接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Error</span>.prepareStackTrace(error, structuredStackTrace)</span><br></pre></td></tr></table></figure><p>这个接口常常被用来格式化错误信息，<code>structuredStackTrace</code> 包含了一组 CallSite 对象，CallSite 对象支持的方法有：getThis, getTypeName, getFunction, getFunctionName, getMethodName, getFileName, getLineNumber, getColumnNumber, getEvalOrigin, isToplevel, isEval, isNative, isConstructor, isAsync, isPromiseAll, getPromiseIndex</p><p>因此借助 CallSite 可以拿到 Error 抛出的文件、行列位置。</p><ul><li><code>getFileName</code>: if this function was defined in a script returns the name of the script</li><li><code>getLineNumber</code>: if this function was defined in a script returns the current line number</li><li><code>getColumnNumber</code>: if this function was defined in a script returns the current column number</li></ul><p>最后通过 <code>source-map</code> 模块的缓存，获取执行前后的代码。</p><p>处理 Error stack 的意义对 JS 直接编写的项目意义可能不是那么大，但假如开发者使用了 TS、或其他原因使生产环境的代码经过了一定编译，这时直接抛出的 Error stack 信息对开发者相当不友好。特定场景下 source-map 的代码映射变得至关重要。</p><p>默认地，Elastic APM 只记录 uncaughtException 和一小部分内部 patch 代码的错误。如果有较强的查错需求，得主动在业务中调用 <code>agent.captureError</code> 方法记录异常。</p><p>另外，若项目有特殊异常上报等原因需要监听 uncaughtException 事件，<strong>应当在 agent start() <code>之后</code>覆盖 <a href="https://www.elastic.co/guide/en/apm/agent/nodejs/current/agent-api.html#apm-handle-uncaught-exceptions" target="_blank" rel="noopener">agent.handleUncaughtExceptions</a> 方法</strong>，这样才能使其默认的捕获后 process.exit 的处理失效，以免进程在任务执行结束之前被 APM 的监听器强制退出。用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apm = <span class="built_in">require</span>(<span class="string">'elastic-apm-node'</span>).start()</span><br><span class="line">apm.handleUncaughtExceptions(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Do your own stuff... and then exit:</span></span><br><span class="line">  process.exit(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果 handleUncaughtExceptions 在 start 之前调用，会被重新覆盖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Agent.prototype.handleUncaughtExceptions = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> agent = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>._uncaughtExceptionListener) &#123;</span><br><span class="line">    process.removeListener(<span class="string">'uncaughtException'</span>, <span class="keyword">this</span>._uncaughtExceptionListener)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._uncaughtExceptionListener = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    agent.logger.debug(<span class="string">'Elastic APM caught unhandled exception: %s'</span>, err.message)</span><br><span class="line">    agent.captureError(err, &#123; <span class="attr">handled</span>: <span class="literal">false</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      cb ? cb(err) : process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  process.on(<span class="string">'uncaughtException'</span>, <span class="keyword">this</span>._uncaughtExceptionListener)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Metric"><a href="#Metric" class="headerlink" title="Metric"></a>Metric</h2><p>一般来说，Node.js 原生暴露的接口足够对进程性能的基本状况有所判断了，但 APM 系统总是希望监控更详细的信息。</p><p>尤其是系统 CPU、内存占用率的走势图，原生 API 获取到的信息仍需要一定的计算工作。在简洁和效率的取舍上，一部分探针选择用纯 JS 计算，另一部分探针选择使用 C++ 获取/计算。使用 C++ 的库一般还会获取更复杂的指标，如 <a href="https://github.com/RuntimeTools/appmetrics" target="_blank" rel="noopener">appmetrics</a> 会获取一部分 GC、Event loop 信息（然而 GC 耗费占比的监控在 Node.js Runtime 下无法实现，信息来自：<a href="https://www.zhihu.com/question/315261661/answer/637417008" target="_blank" rel="noopener">关于Nodejs的性能监控思考？ - hyj1991的回答 - 知乎</a>）</p><p>Elastic APM 是相对小清新的一派，它选择纯 JS 实现，只针对 Linux 环境进行优化。如果发现当前服务环境 <code>process.platform</code> 是 Linux，它会从 /proc/ 目录定时获取系统性能快照，以降低计算量。如果是其他系统，再使用 JS 通过算法计算。</p><blockquote><p>实际上 Node.js 的底层 <code>libuv</code> 就是靠读取 proc 文件来采集 Linux 相关信息的。关于 proc 的介绍可以阅读 Linux 文件系统文档 <a href="https://github.com/torvalds/linux/blob/master/Documentation/filesystems/proc.txt" target="_blank" rel="noopener">https://github.com/torvalds/linux/blob/master/Documentation/filesystems/proc.txt</a></p></blockquote><ul><li>/proc/meminfo: 记录系统内存信息，用来获取两个指标：MemAvailable 和 MemTotal。对应 <code>os.totalmem()</code> 和 <code>os.freemem()</code>。</li><li>/proc/stat: 记录 CPU 活动信息，用来获取两个指标：cpuTotal 和 cpuUsage。这一步用 Node.js 计算略麻烦，需要定时缓存 <code>os.cpus()</code> 的 <code>times.total</code> <code>times.idle</code>指标。</li><li>/proc/self/stat: 不同于前面两个记录系统级信息的文件，此文件记录了当前进程的所有活动信息。可以用来获取进程 CPU、内存使用状况。原本 CPU 使用率需要除法运算，对应 <code>process.cpuUsage([previousValue])</code>，<code>process.hrtime([time])</code>，而通过此文件可以简化为加减法运算。获取的内存数据也可以用来计算 <code>process.memoryUsage().rss</code>，不过还是直接使用 Node.js 的 API 更简单。</li></ul><h2 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h2><p>Elastic APM 中的事务，类似于 opentracing 中的 Span，但把一个请求中所有的 Span 抽象为一个概念。</p><p>Transaction 实现的基础是各种代码钩子。</p><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><p>通过 patch ，做一些信息采集，例如 Koa 框架的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">koa, agent, &#123; version, enabled &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!enabled) <span class="keyword">return</span> koa</span><br><span class="line"></span><br><span class="line">  agent.setFramework(&#123; <span class="attr">name</span>: <span class="string">'koa'</span>, version, <span class="attr">overwrite</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> koa</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">shimmer.wrap(Router.prototype, <span class="string">'match'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">orig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">_, method</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> matched = orig.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> method !== <span class="string">'string'</span>) &#123;</span><br><span class="line">      agent.logger.debug(<span class="string">'unexpected method type in koa-router prototype.match: %s'</span>, <span class="keyword">typeof</span> method)</span><br><span class="line">      <span class="keyword">return</span> matched</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(matched &amp;&amp; matched.pathAndMethod)) &#123;</span><br><span class="line">      <span class="keyword">const</span> layer = matched.pathAndMethod.find(<span class="function"><span class="keyword">function</span> (<span class="params">layer</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> layer &amp;&amp; layer.opts &amp;&amp; layer.opts.end === <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> path = layer &amp;&amp; layer.path</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> path === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> name = method + <span class="string">' '</span> + path</span><br><span class="line">        agent._instrumentation.setDefaultTransactionName(name)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        agent.logger.debug(<span class="string">'unexpected path type in koa-router prototype.match: %s'</span>, <span class="keyword">typeof</span> path)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      agent.logger.debug(<span class="string">'unexpected match result in koa-router prototype.match: %s'</span>, <span class="keyword">typeof</span> matched)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> matched</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的 patch 配合 <code>require-in-the-middle</code> 模块，完成了对各框架的包装。</p><h3 id="async-hook"><a href="#async-hook" class="headerlink" title="async-hook"></a>async-hook</h3><p>利用 async-hook 实现记录整串请求，来看两个代码片段。</p><p>首先是基于 async-hook 封装了 Instrumentation 的 <code>currentTransaction</code> 方法，使异步操作中随时可以拿到当前 async scope id 下的 Transaction 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncHooks = <span class="built_in">require</span>(<span class="string">'async_hooks'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">ins</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> asyncHook = asyncHooks.createHook(&#123; init, before, destroy &#125;)</span><br><span class="line">  <span class="keyword">const</span> contexts = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> activeTransactions = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(ins, <span class="string">'currentTransaction'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123;</span><br><span class="line">      <span class="keyword">const</span> asyncId = asyncHooks.executionAsyncId()</span><br><span class="line">      <span class="keyword">return</span> activeTransactions.get(asyncId) || <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> (trans) &#123;</span><br><span class="line">      <span class="keyword">const</span> asyncId = asyncHooks.executionAsyncId()</span><br><span class="line">      <span class="keyword">if</span> (trans) &#123;</span><br><span class="line">        activeTransactions.set(asyncId, trans)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        activeTransactions.delete(asyncId)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 currentTransaction 的一处应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Instrumentation.prototype.bindFunction = <span class="function"><span class="keyword">function</span> (<span class="params">original</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> original !== <span class="string">'function'</span> || original.name === <span class="string">'elasticAPMCallbackWrapper'</span>) <span class="keyword">return</span> original</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ins = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">var</span> trans = <span class="keyword">this</span>.currentTransaction</span><br><span class="line">  <span class="keyword">var</span> span = <span class="keyword">this</span>.currentSpan</span><br><span class="line">  <span class="keyword">if</span> (trans &amp;&amp; !trans.sampled) &#123;</span><br><span class="line">    <span class="keyword">return</span> original</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> elasticAPMCallbackWrapper</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">elasticAPMCallbackWrapper</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prevTrans = ins.currentTransaction</span><br><span class="line">    ins.currentTransaction = trans</span><br><span class="line">    ins.bindingSpan = <span class="literal">null</span></span><br><span class="line">    ins.activeSpan = span</span><br><span class="line">    <span class="keyword">if</span> (trans) trans.sync = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (span) span.sync = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> result = original.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    ins.currentTransaction = prevTrans</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>async hook 是 Node.js 8 以后出现的概念，为了兼容旧版本，Elastic APM 借助 <code>async-listener</code> 模块做了一些兼容，尽管 Elastic APM 官方不推荐使用低版本 Node.js 接入。</p><p>虽然 async hook 更进一步可以帮助优化异步调用栈，改善异步 Error 信息的可读性，但 APM 很难从底层判断哪些异步 CallSite 是用户想保留的，所以没有做这种处理。</p><h3 id="Span-Trace"><a href="#Span-Trace" class="headerlink" title="Span Trace"></a>Span Trace</h3><p>Span 用来记录 db 操作、http、websocket 远程调用等细致操作，Elastic APM 同时记录了调用栈。</p><p>我们知道，console.trace() 方法可以用来定位 trace 信息，它实际使用了 V8 Error 暴露的另一个方法 <code>Error.captureStackTrace(error, constructorOpt)</code>。</p><p><code>error</code> 是用来记录 trace 信息的必传对象，captureStackTrace 会将字符串附加到 error 对象的 stack 属性上。</p><p><code>constructorOpt</code> 是用来隐藏底层调用栈的可选函数，用法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyError</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Error</span>.captureStackTrace(<span class="keyword">this</span>, MyError);</span><br><span class="line">  <span class="comment">// Any other initialization goes here.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h4><p>上面提到的 V8 Error trace API，结合 TJ 的 <code>callsite</code> 更容易理解，功能是获取当前的 CallSite 集合。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> orig = <span class="built_in">Error</span>.prepareStackTrace;</span><br><span class="line">  <span class="built_in">Error</span>.prepareStackTrace = <span class="function"><span class="keyword">function</span>(<span class="params">_, stack</span>)</span>&#123; <span class="keyword">return</span> stack; &#125;;</span><br><span class="line">  <span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>;</span><br><span class="line">  <span class="built_in">Error</span>.captureStackTrace(err, <span class="built_in">arguments</span>.callee);</span><br><span class="line">  <span class="keyword">var</span> stack = err.stack;</span><br><span class="line">  <span class="built_in">Error</span>.prepareStackTrace = orig;</span><br><span class="line">  <span class="keyword">return</span> stack;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>不得不说，和活跃的商业巨头产品相比，Elastic APM 目前的功能支持度存在不少差距。如果想在 APM 专业领域探索，绕不开对 New Relic 源码的学习。 XD</p><p>但 Elastic APM Node.js 依然是目前最值得关注的开源探针式监控方案，其 agent 基础功能支持度较好，代码结构也很简单，希望能被更多人使用，帮助它更快成长~</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://github.com/elastic/apm-agent-nodejs" target="_blank" rel="noopener">https://github.com/elastic/apm-agent-nodejs</a></li><li><a href="https://v8.dev/docs/stack-trace-api" target="_blank" rel="noopener">https://v8.dev/docs/stack-trace-api</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;根据上一篇《&lt;a href=&quot;http://claude-ray.com/2019/05/19/node-apm-product-research/&quot;&gt;Node.js APM 产品调研&lt;/a&gt;》的市场调研结果，笔者更青睐 Elastic APM 这个开源产品，故决定带来它的一篇专题介绍。&lt;/p&gt;
&lt;p&gt;尽管团队已经开始试用，但踩坑时间较短，与其编写测评，不如先带大家走进这个项目，剖析个别令人感兴趣的技术点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://claude-ray.com/tags/Node-js/"/>
    
      <category term="APM" scheme="http://claude-ray.com/tags/APM/"/>
    
      <category term="Elastic-APM" scheme="http://claude-ray.com/tags/Elastic-APM/"/>
    
      <category term="V8" scheme="http://claude-ray.com/tags/V8/"/>
    
  </entry>
  
</feed>
